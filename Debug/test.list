
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000498c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b9c  08004b9c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba4  08004ba4  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08004bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000013c  08004ce8  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08004ce8  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011068  00000000  00000000  0002016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ea  00000000  00000000  000311d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  000332c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  000340d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027261  00000000  00000000  00034e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b75  00000000  00000000  0005c079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7ce4  00000000  00000000  0006cbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001648d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aec  00000000  00000000  00164924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000013c 	.word	0x2000013c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004b6c 	.word	0x08004b6c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000140 	.word	0x20000140
 8000234:	08004b6c 	.word	0x08004b6c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <ledView>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*--LED FUNCTIONS--*/
void ledView(uint8_t key, uint8_t led, uint8_t status) {
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
 8000546:	460b      	mov	r3, r1
 8000548:	71bb      	strb	r3, [r7, #6]
 800054a:	4613      	mov	r3, r2
 800054c:	717b      	strb	r3, [r7, #5]
	ledmatrix[key][led] = status;
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	79b9      	ldrb	r1, [r7, #6]
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <ledView+0x34>)
 8000554:	4613      	mov	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	4403      	add	r3, r0
 800055e:	440b      	add	r3, r1
 8000560:	797a      	ldrb	r2, [r7, #5]
 8000562:	701a      	strb	r2, [r3, #0]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000234 	.word	0x20000234

08000574 <ledsAll>:

void ledsAll(uint8_t st) {
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < KEYOUTS; i++) { for (uint8_t j = 0; j < LEDS; j++) { ledmatrix[i][j] = st; } }
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	e016      	b.n	80005b2 <ledsAll+0x3e>
 8000584:	2300      	movs	r3, #0
 8000586:	73bb      	strb	r3, [r7, #14]
 8000588:	e00d      	b.n	80005a6 <ledsAll+0x32>
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	7bb9      	ldrb	r1, [r7, #14]
 800058e:	480e      	ldr	r0, [pc, #56]	; (80005c8 <ledsAll+0x54>)
 8000590:	4613      	mov	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	4403      	add	r3, r0
 800059a:	440b      	add	r3, r1
 800059c:	79fa      	ldrb	r2, [r7, #7]
 800059e:	701a      	strb	r2, [r3, #0]
 80005a0:	7bbb      	ldrb	r3, [r7, #14]
 80005a2:	3301      	adds	r3, #1
 80005a4:	73bb      	strb	r3, [r7, #14]
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	2b09      	cmp	r3, #9
 80005aa:	d9ee      	bls.n	800058a <ledsAll+0x16>
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	3301      	adds	r3, #1
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d9e5      	bls.n	8000584 <ledsAll+0x10>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000234 	.word	0x20000234

080005cc <ledsView>:

void ledsView() {
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
	for ( int key = 0; key < KEYOUTS; key++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	e027      	b.n	8000628 <ledsView+0x5c>
	  for ( int led = 0; led < LEDS; led++) {
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	e01e      	b.n	800061c <ledsView+0x50>
		if ( keycols == key ) HAL_GPIO_WritePin(leds[led].port, leds[led].pin, ledmatrix[key][led]);
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <ledsView+0x6c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d115      	bne.n	8000616 <ledsView+0x4a>
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <ledsView+0x70>)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <ledsView+0x70>)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	4413      	add	r3, r2
 80005fa:	8899      	ldrh	r1, [r3, #4]
 80005fc:	4c10      	ldr	r4, [pc, #64]	; (8000640 <ledsView+0x74>)
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4613      	mov	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	18e2      	adds	r2, r4, r3
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	f001 f9e9 	bl	80019e8 <HAL_GPIO_WritePin>
	  for ( int led = 0; led < LEDS; led++) {
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2b09      	cmp	r3, #9
 8000620:	dddd      	ble.n	80005de <ledsView+0x12>
	for ( int key = 0; key < KEYOUTS; key++) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b0f      	cmp	r3, #15
 800062c:	ddd4      	ble.n	80005d8 <ledsView+0xc>
	  }
	}
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bd90      	pop	{r4, r7, pc}
 8000638:	2000022c 	.word	0x2000022c
 800063c:	20000098 	.word	0x20000098
 8000640:	20000234 	.word	0x20000234

08000644 <receiveData>:

/*--UART FUNCTIONS--*/
void receiveData() {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	if( HAL_UART_Receive_IT (&huart3, ledsaddr, 3) != HAL_BUSY ) {
 8000648:	2203      	movs	r2, #3
 800064a:	491a      	ldr	r1, [pc, #104]	; (80006b4 <receiveData+0x70>)
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <receiveData+0x74>)
 800064e:	f002 ff5b 	bl	8003508 <HAL_UART_Receive_IT>
 8000652:	4603      	mov	r3, r0
 8000654:	2b02      	cmp	r3, #2
 8000656:	d02a      	beq.n	80006ae <receiveData+0x6a>
		if (ledsaddr[0] == 0xaa && ledsaddr[1] == 0xbb) (ledsaddr[2] == 0xff) ? ledsAll(0) : ledsAll(1);
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <receiveData+0x70>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2baa      	cmp	r3, #170	; 0xaa
 800065e:	d10f      	bne.n	8000680 <receiveData+0x3c>
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <receiveData+0x70>)
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	2bbb      	cmp	r3, #187	; 0xbb
 8000666:	d10b      	bne.n	8000680 <receiveData+0x3c>
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <receiveData+0x70>)
 800066a:	789b      	ldrb	r3, [r3, #2]
 800066c:	2bff      	cmp	r3, #255	; 0xff
 800066e:	d103      	bne.n	8000678 <receiveData+0x34>
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff ff7f 	bl	8000574 <ledsAll>
 8000676:	e01a      	b.n	80006ae <receiveData+0x6a>
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff ff7b 	bl	8000574 <ledsAll>
 800067e:	e016      	b.n	80006ae <receiveData+0x6a>
		else if(ledsaddr[0] < KEYOUTS && ledsaddr[1] < LEDS) ledView(ledsaddr[0], ledsaddr[1], (ledsaddr[2] == 0xff) ? 0 : 1);//ledmatrix[ ledsaddr[0] ][ ledsaddr[1] ] = (ledsaddr[2] == 0xff) ? 0 : 1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <receiveData+0x70>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d812      	bhi.n	80006ae <receiveData+0x6a>
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <receiveData+0x70>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	2b09      	cmp	r3, #9
 800068e:	d80e      	bhi.n	80006ae <receiveData+0x6a>
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <receiveData+0x70>)
 8000692:	7818      	ldrb	r0, [r3, #0]
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <receiveData+0x70>)
 8000696:	7859      	ldrb	r1, [r3, #1]
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <receiveData+0x70>)
 800069a:	789b      	ldrb	r3, [r3, #2]
 800069c:	2bff      	cmp	r3, #255	; 0xff
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	461a      	mov	r2, r3
 80006a8:	f7ff ff48 	bl	800053c <ledView>
	}
}
 80006ac:	e7ff      	b.n	80006ae <receiveData+0x6a>
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000230 	.word	0x20000230
 80006b8:	200001a4 	.word	0x200001a4

080006bc <sendKeyboardData>:

void sendKeyboardData() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	for (uint8_t x = 0; x < KEYOUTS; x++) {
 80006c2:	2300      	movs	r3, #0
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	e03b      	b.n	8000740 <sendKeyboardData+0x84>
		for (uint8_t y = 0; y < KEYINS; y++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	71bb      	strb	r3, [r7, #6]
 80006cc:	e032      	b.n	8000734 <sendKeyboardData+0x78>
			if ( flagChg[x][y] == 1 ) {
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	79b9      	ldrb	r1, [r7, #6]
 80006d2:	4835      	ldr	r0, [pc, #212]	; (80007a8 <sendKeyboardData+0xec>)
 80006d4:	4613      	mov	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	4413      	add	r3, r2
 80006da:	4403      	add	r3, r0
 80006dc:	440b      	add	r3, r1
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d124      	bne.n	800072e <sendKeyboardData+0x72>
				txbuff[0] = x; //(y + x * KEYINS);
 80006e4:	4a31      	ldr	r2, [pc, #196]	; (80007ac <sendKeyboardData+0xf0>)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	7013      	strb	r3, [r2, #0]
				txbuff[1] = y;
 80006ea:	4a30      	ldr	r2, [pc, #192]	; (80007ac <sendKeyboardData+0xf0>)
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	7053      	strb	r3, [r2, #1]
				txbuff[2] = (flag[x][y] == 1) ? 0xFF : 0x00;//status;
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	79b9      	ldrb	r1, [r7, #6]
 80006f4:	482e      	ldr	r0, [pc, #184]	; (80007b0 <sendKeyboardData+0xf4>)
 80006f6:	4613      	mov	r3, r2
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	4413      	add	r3, r2
 80006fc:	4403      	add	r3, r0
 80006fe:	440b      	add	r3, r1
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d101      	bne.n	800070a <sendKeyboardData+0x4e>
 8000706:	22ff      	movs	r2, #255	; 0xff
 8000708:	e000      	b.n	800070c <sendKeyboardData+0x50>
 800070a:	2200      	movs	r2, #0
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <sendKeyboardData+0xf0>)
 800070e:	709a      	strb	r2, [r3, #2]

				flagChg[x][y] = 0;
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	79b9      	ldrb	r1, [r7, #6]
 8000714:	4824      	ldr	r0, [pc, #144]	; (80007a8 <sendKeyboardData+0xec>)
 8000716:	4613      	mov	r3, r2
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4413      	add	r3, r2
 800071c:	4403      	add	r3, r0
 800071e:	440b      	add	r3, r1
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart3, &txbuff, 3);
 8000724:	2203      	movs	r2, #3
 8000726:	4921      	ldr	r1, [pc, #132]	; (80007ac <sendKeyboardData+0xf0>)
 8000728:	4822      	ldr	r0, [pc, #136]	; (80007b4 <sendKeyboardData+0xf8>)
 800072a:	f002 fe8f 	bl	800344c <HAL_UART_Transmit_IT>
		for (uint8_t y = 0; y < KEYINS; y++) {
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	3301      	adds	r3, #1
 8000732:	71bb      	strb	r3, [r7, #6]
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	2b08      	cmp	r3, #8
 8000738:	d9c9      	bls.n	80006ce <sendKeyboardData+0x12>
	for (uint8_t x = 0; x < KEYOUTS; x++) {
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	3301      	adds	r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b0f      	cmp	r3, #15
 8000744:	d9c0      	bls.n	80006c8 <sendKeyboardData+0xc>
			}
		}
	}
	for (uint8_t u = 0; u < 2; u++) {
 8000746:	2300      	movs	r3, #0
 8000748:	717b      	strb	r3, [r7, #5]
 800074a:	e025      	b.n	8000798 <sendKeyboardData+0xdc>
		if ( flagChgEKeys[u] == 1 ) {
 800074c:	797b      	ldrb	r3, [r7, #5]
 800074e:	4a1a      	ldr	r2, [pc, #104]	; (80007b8 <sendKeyboardData+0xfc>)
 8000750:	5cd3      	ldrb	r3, [r2, r3]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d11d      	bne.n	8000792 <sendKeyboardData+0xd6>
			txbuff[0] = 0xAA;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <sendKeyboardData+0xf0>)
 8000758:	22aa      	movs	r2, #170	; 0xaa
 800075a:	701a      	strb	r2, [r3, #0]
			txbuff[1] = (u == 0) ? 0xAC : 0xAD;
 800075c:	797b      	ldrb	r3, [r7, #5]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <sendKeyboardData+0xaa>
 8000762:	22ac      	movs	r2, #172	; 0xac
 8000764:	e000      	b.n	8000768 <sendKeyboardData+0xac>
 8000766:	22ad      	movs	r2, #173	; 0xad
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <sendKeyboardData+0xf0>)
 800076a:	705a      	strb	r2, [r3, #1]
			txbuff[2] = (flagEKeys[u] == 1) ? 0xFF : 0x00;
 800076c:	797b      	ldrb	r3, [r7, #5]
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <sendKeyboardData+0x100>)
 8000770:	5cd3      	ldrb	r3, [r2, r3]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d101      	bne.n	800077a <sendKeyboardData+0xbe>
 8000776:	22ff      	movs	r2, #255	; 0xff
 8000778:	e000      	b.n	800077c <sendKeyboardData+0xc0>
 800077a:	2200      	movs	r2, #0
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <sendKeyboardData+0xf0>)
 800077e:	709a      	strb	r2, [r3, #2]

			flagChgEKeys[u] = 0;
 8000780:	797b      	ldrb	r3, [r7, #5]
 8000782:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <sendKeyboardData+0xfc>)
 8000784:	2100      	movs	r1, #0
 8000786:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit_IT(&huart3, &txbuff, 3);
 8000788:	2203      	movs	r2, #3
 800078a:	4908      	ldr	r1, [pc, #32]	; (80007ac <sendKeyboardData+0xf0>)
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <sendKeyboardData+0xf8>)
 800078e:	f002 fe5d 	bl	800344c <HAL_UART_Transmit_IT>
	for (uint8_t u = 0; u < 2; u++) {
 8000792:	797b      	ldrb	r3, [r7, #5]
 8000794:	3301      	adds	r3, #1
 8000796:	717b      	strb	r3, [r7, #5]
 8000798:	797b      	ldrb	r3, [r7, #5]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d9d6      	bls.n	800074c <sendKeyboardData+0x90>
		}
	}
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000364 	.word	0x20000364
 80007ac:	20000400 	.word	0x20000400
 80007b0:	200002d4 	.word	0x200002d4
 80007b4:	200001a4 	.word	0x200001a4
 80007b8:	200003f8 	.word	0x200003f8
 80007bc:	200003f4 	.word	0x200003f4

080007c0 <scanKeyboard>:

/*--INPUT FUNCTIONS--*/
#ifdef ENABLE_KEYSCAN
void scanKeyboard() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	// ENABLE KEYBOARD
	HAL_GPIO_WritePin(keyout[keycols].port, keyout[keycols].pin, 0);
 80007c6:	4b7e      	ldr	r3, [pc, #504]	; (80009c0 <scanKeyboard+0x200>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b7d      	ldr	r3, [pc, #500]	; (80009c4 <scanKeyboard+0x204>)
 80007ce:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80007d2:	4b7b      	ldr	r3, [pc, #492]	; (80009c0 <scanKeyboard+0x200>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4a7b      	ldr	r2, [pc, #492]	; (80009c4 <scanKeyboard+0x204>)
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	4413      	add	r3, r2
 80007dc:	889b      	ldrh	r3, [r3, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	4619      	mov	r1, r3
 80007e2:	f001 f901 	bl	80019e8 <HAL_GPIO_WritePin>

	#ifdef USE_MAINLEDS
		ledsView();
 80007e6:	f7ff fef1 	bl	80005cc <ledsView>
	#endif

	//Special buttons
	for (int u = 0; u < 2; u++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e020      	b.n	8000832 <scanKeyboard+0x72>
		if ( HAL_GPIO_ReadPin(ekeys[u].port, ekeys[u].pin) == GPIO_PIN_RESET && flagEKeys[0] == 0 ) { flagEKeys[u] = 1; flagChgEKeys[u] = 1; }
 80007f0:	4a75      	ldr	r2, [pc, #468]	; (80009c8 <scanKeyboard+0x208>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007f8:	4973      	ldr	r1, [pc, #460]	; (80009c8 <scanKeyboard+0x208>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	889b      	ldrh	r3, [r3, #4]
 8000802:	4619      	mov	r1, r3
 8000804:	4610      	mov	r0, r2
 8000806:	f001 f8d7 	bl	80019b8 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d10d      	bne.n	800082c <scanKeyboard+0x6c>
 8000810:	4b6e      	ldr	r3, [pc, #440]	; (80009cc <scanKeyboard+0x20c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <scanKeyboard+0x6c>
 8000818:	4a6c      	ldr	r2, [pc, #432]	; (80009cc <scanKeyboard+0x20c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	4a6b      	ldr	r2, [pc, #428]	; (80009d0 <scanKeyboard+0x210>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
	for (int u = 0; u < 2; u++) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b01      	cmp	r3, #1
 8000836:	dddb      	ble.n	80007f0 <scanKeyboard+0x30>
	}

	//Main keyboard
	for (int b = 0; b < KEYINS; b++) {
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	e093      	b.n	8000966 <scanKeyboard+0x1a6>
	  if ( HAL_GPIO_ReadPin(keyin[b].port, keyin[b].pin) == GPIO_PIN_RESET && flag[keycols][b] == 0 ) {
 800083e:	4a65      	ldr	r2, [pc, #404]	; (80009d4 <scanKeyboard+0x214>)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000846:	4963      	ldr	r1, [pc, #396]	; (80009d4 <scanKeyboard+0x214>)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	440b      	add	r3, r1
 800084e:	889b      	ldrh	r3, [r3, #4]
 8000850:	4619      	mov	r1, r3
 8000852:	4610      	mov	r0, r2
 8000854:	f001 f8b0 	bl	80019b8 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d138      	bne.n	80008d0 <scanKeyboard+0x110>
 800085e:	4b58      	ldr	r3, [pc, #352]	; (80009c0 <scanKeyboard+0x200>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	4a5c      	ldr	r2, [pc, #368]	; (80009d8 <scanKeyboard+0x218>)
 8000866:	460b      	mov	r3, r1
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	440b      	add	r3, r1
 800086c:	441a      	add	r2, r3
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d12b      	bne.n	80008d0 <scanKeyboard+0x110>
		  HAL_Delay(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f000 fd29 	bl	80012d0 <HAL_Delay>
		  if ( HAL_GPIO_ReadPin(keyin[b].port, keyin[b].pin) == GPIO_PIN_RESET ) { flag[keycols][b] = 1; flagChg[keycols][b] = 1; }
 800087e:	4a55      	ldr	r2, [pc, #340]	; (80009d4 <scanKeyboard+0x214>)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000886:	4953      	ldr	r1, [pc, #332]	; (80009d4 <scanKeyboard+0x214>)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	440b      	add	r3, r1
 800088e:	889b      	ldrh	r3, [r3, #4]
 8000890:	4619      	mov	r1, r3
 8000892:	4610      	mov	r0, r2
 8000894:	f001 f890 	bl	80019b8 <HAL_GPIO_ReadPin>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d160      	bne.n	8000960 <scanKeyboard+0x1a0>
 800089e:	4b48      	ldr	r3, [pc, #288]	; (80009c0 <scanKeyboard+0x200>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4619      	mov	r1, r3
 80008a4:	4a4c      	ldr	r2, [pc, #304]	; (80009d8 <scanKeyboard+0x218>)
 80008a6:	460b      	mov	r3, r1
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	440b      	add	r3, r1
 80008ac:	441a      	add	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	4b42      	ldr	r3, [pc, #264]	; (80009c0 <scanKeyboard+0x200>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4a47      	ldr	r2, [pc, #284]	; (80009dc <scanKeyboard+0x21c>)
 80008be:	460b      	mov	r3, r1
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	440b      	add	r3, r1
 80008c4:	441a      	add	r2, r3
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e047      	b.n	8000960 <scanKeyboard+0x1a0>
	  } else if( HAL_GPIO_ReadPin(keyin[b].port, keyin[b].pin) == GPIO_PIN_SET && flag[keycols][b] == 1 ) {
 80008d0:	4a40      	ldr	r2, [pc, #256]	; (80009d4 <scanKeyboard+0x214>)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80008d8:	493e      	ldr	r1, [pc, #248]	; (80009d4 <scanKeyboard+0x214>)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	440b      	add	r3, r1
 80008e0:	889b      	ldrh	r3, [r3, #4]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4610      	mov	r0, r2
 80008e6:	f001 f867 	bl	80019b8 <HAL_GPIO_ReadPin>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d137      	bne.n	8000960 <scanKeyboard+0x1a0>
 80008f0:	4b33      	ldr	r3, [pc, #204]	; (80009c0 <scanKeyboard+0x200>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	4a38      	ldr	r2, [pc, #224]	; (80009d8 <scanKeyboard+0x218>)
 80008f8:	460b      	mov	r3, r1
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	440b      	add	r3, r1
 80008fe:	441a      	add	r2, r3
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d12a      	bne.n	8000960 <scanKeyboard+0x1a0>
		  HAL_Delay(1);
 800090a:	2001      	movs	r0, #1
 800090c:	f000 fce0 	bl	80012d0 <HAL_Delay>
		  if ( HAL_GPIO_ReadPin(keyin[b].port, keyin[b].pin) == GPIO_PIN_SET ) { flag[keycols][b] = 0; flagChg[keycols][b] = 1; }
 8000910:	4a30      	ldr	r2, [pc, #192]	; (80009d4 <scanKeyboard+0x214>)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000918:	492e      	ldr	r1, [pc, #184]	; (80009d4 <scanKeyboard+0x214>)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	440b      	add	r3, r1
 8000920:	889b      	ldrh	r3, [r3, #4]
 8000922:	4619      	mov	r1, r3
 8000924:	4610      	mov	r0, r2
 8000926:	f001 f847 	bl	80019b8 <HAL_GPIO_ReadPin>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d117      	bne.n	8000960 <scanKeyboard+0x1a0>
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <scanKeyboard+0x200>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <scanKeyboard+0x218>)
 8000938:	460b      	mov	r3, r1
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	440b      	add	r3, r1
 800093e:	441a      	add	r2, r3
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	4413      	add	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <scanKeyboard+0x200>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	4a23      	ldr	r2, [pc, #140]	; (80009dc <scanKeyboard+0x21c>)
 8000950:	460b      	mov	r3, r1
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	440b      	add	r3, r1
 8000956:	441a      	add	r2, r3
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	4413      	add	r3, r2
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
	for (int b = 0; b < KEYINS; b++) {
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	2b08      	cmp	r3, #8
 800096a:	f77f af68 	ble.w	800083e <scanKeyboard+0x7e>
	  }
	}

	if(rptcnt >= REPEATCOUNT) {
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <scanKeyboard+0x220>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b04      	cmp	r3, #4
 8000974:	d919      	bls.n	80009aa <scanKeyboard+0x1ea>
	  // DISABLE KEYBOARD
	  HAL_GPIO_WritePin(keyout[keycols].port, keyout[keycols].pin, 1);
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <scanKeyboard+0x200>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <scanKeyboard+0x204>)
 800097e:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <scanKeyboard+0x200>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <scanKeyboard+0x204>)
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	4413      	add	r3, r2
 800098c:	889b      	ldrh	r3, [r3, #4]
 800098e:	2201      	movs	r2, #1
 8000990:	4619      	mov	r1, r3
 8000992:	f001 f829 	bl	80019e8 <HAL_GPIO_WritePin>

	  rptcnt = 0;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <scanKeyboard+0x220>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
	  keycols++;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <scanKeyboard+0x200>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <scanKeyboard+0x200>)
 80009a6:	701a      	strb	r2, [r3, #0]
	} else rptcnt++;
}
 80009a8:	e005      	b.n	80009b6 <scanKeyboard+0x1f6>
	} else rptcnt++;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <scanKeyboard+0x220>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <scanKeyboard+0x220>)
 80009b4:	701a      	strb	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000022c 	.word	0x2000022c
 80009c4:	20000018 	.word	0x20000018
 80009c8:	20000000 	.word	0x20000000
 80009cc:	200003f4 	.word	0x200003f4
 80009d0:	200003f8 	.word	0x200003f8
 80009d4:	200000e8 	.word	0x200000e8
 80009d8:	200002d4 	.word	0x200002d4
 80009dc:	20000364 	.word	0x20000364
 80009e0:	200003fb 	.word	0x200003fb

080009e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ea:	f000 fc14 	bl	8001216 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ee:	f000 f887 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f2:	f000 f967 	bl	8000cc4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009f6:	f000 f935 	bl	8000c64 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80009fa:	f000 f8f1 	bl	8000be0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80009fe:	4839      	ldr	r0, [pc, #228]	; (8000ae4 <main+0x100>)
 8000a00:	f002 f9c0 	bl	8002d84 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* --DISABLE KEYOUTS-- */
  for (int d = 0; d < KEYOUTS; d++) { HAL_GPIO_WritePin(keyout[d].port, keyout[d].pin, 1); }
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e00f      	b.n	8000a2a <main+0x46>
 8000a0a:	4a37      	ldr	r2, [pc, #220]	; (8000ae8 <main+0x104>)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a12:	4a35      	ldr	r2, [pc, #212]	; (8000ae8 <main+0x104>)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	4413      	add	r3, r2
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f000 ffe2 	bl	80019e8 <HAL_GPIO_WritePin>
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3301      	adds	r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	ddec      	ble.n	8000a0a <main+0x26>

  /* --DISABLE LEDS-- */
  for (int d = 0; d < LEDS; d++) { HAL_GPIO_WritePin(leds[d].port, leds[d].pin, 1); }
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	e00f      	b.n	8000a56 <main+0x72>
 8000a36:	4a2d      	ldr	r2, [pc, #180]	; (8000aec <main+0x108>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a3e:	4a2b      	ldr	r2, [pc, #172]	; (8000aec <main+0x108>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	4413      	add	r3, r2
 8000a46:	889b      	ldrh	r3, [r3, #4]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f000 ffcc 	bl	80019e8 <HAL_GPIO_WritePin>
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	ddec      	ble.n	8000a36 <main+0x52>

  /* --NULL FLAGS-- */
  for (int d = 0; d < KEYOUTS; d++) { for (int g = 0; g < KEYINS; g++) { flag[d][g] = 0; flagChg[d][g] = 0; } }
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	e01f      	b.n	8000aa2 <main+0xbe>
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	e016      	b.n	8000a96 <main+0xb2>
 8000a68:	4921      	ldr	r1, [pc, #132]	; (8000af0 <main+0x10c>)
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	4413      	add	r3, r2
 8000a72:	18ca      	adds	r2, r1, r3
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	491d      	ldr	r1, [pc, #116]	; (8000af4 <main+0x110>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4613      	mov	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	4413      	add	r3, r2
 8000a86:	18ca      	adds	r2, r1, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	dde5      	ble.n	8000a68 <main+0x84>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	dddc      	ble.n	8000a62 <main+0x7e>

    /* USER CODE BEGIN 3 */
	#ifdef USE_ENCODER
	  	scanEncoder();
	#endif
	receiveData();
 8000aa8:	f7ff fdcc 	bl	8000644 <receiveData>
	#ifdef ENABLE_KEYSCAN
		if ( keycols == KEYOUTS ) keycols = 0;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <main+0x114>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b10      	cmp	r3, #16
 8000ab2:	d102      	bne.n	8000aba <main+0xd6>
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <main+0x114>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
		sendKeyboardData();
 8000aba:	f7ff fdff 	bl	80006bc <sendKeyboardData>
		if (htim6.Instance->CNT-mkr >= 1000) scanKeyboard(); else mkr = htim6.Instance->CNT;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <main+0x100>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <main+0x118>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ace:	d302      	bcc.n	8000ad6 <main+0xf2>
 8000ad0:	f7ff fe76 	bl	80007c0 <scanKeyboard>
 8000ad4:	e7e8      	b.n	8000aa8 <main+0xc4>
 8000ad6:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <main+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <main+0x118>)
 8000ade:	6013      	str	r3, [r2, #0]
	receiveData();
 8000ae0:	e7e2      	b.n	8000aa8 <main+0xc4>
 8000ae2:	bf00      	nop
 8000ae4:	20000158 	.word	0x20000158
 8000ae8:	20000018 	.word	0x20000018
 8000aec:	20000098 	.word	0x20000098
 8000af0:	200002d4 	.word	0x200002d4
 8000af4:	20000364 	.word	0x20000364
 8000af8:	2000022c 	.word	0x2000022c
 8000afc:	200003fc 	.word	0x200003fc

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	; 0x50
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2234      	movs	r2, #52	; 0x34
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 f824 	bl	8004b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b24:	f000 ff7a 	bl	8001a1c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <SystemClock_Config+0xd8>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <SystemClock_Config+0xd8>)
 8000b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <SystemClock_Config+0xd8>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <SystemClock_Config+0xdc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a25      	ldr	r2, [pc, #148]	; (8000bdc <SystemClock_Config+0xdc>)
 8000b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <SystemClock_Config+0xdc>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	2302      	movs	r3, #2
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b70:	23d8      	movs	r3, #216	; 0xd8
 8000b72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 ffa9 	bl	8001adc <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b90:	f000 fa10 	bl	8000fb4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b94:	f000 ff52 	bl	8001a3c <HAL_PWREx_EnableOverDrive>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b9e:	f000 fa09 	bl	8000fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	2107      	movs	r1, #7
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fa39 	bl	8002038 <HAL_RCC_ClockConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000bcc:	f000 f9f2 	bl	8000fb4 <Error_Handler>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3750      	adds	r7, #80	; 0x50
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40007000 	.word	0x40007000

08000be0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */
  uint32_t gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000bf0:	f001 fc14 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <MX_TIM6_Init+0x78>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	0c9b      	lsrs	r3, r3, #18
 8000bfe:	60fb      	str	r3, [r7, #12]
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_TIM6_Init+0x7c>)
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <MX_TIM6_Init+0x80>)
 8000c04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 500;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_TIM6_Init+0x7c>)
 8000c08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c0c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_TIM6_Init+0x7c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_TIM6_Init+0x7c>)
 8000c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_TIM6_Init+0x7c>)
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <MX_TIM6_Init+0x7c>)
 8000c24:	f002 f856 	bl	8002cd4 <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f000 f9c1 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM6_Init+0x7c>)
 8000c40:	f002 fb0a 	bl	8003258 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000c4a:	f000 f9b3 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	20000158 	.word	0x20000158
 8000c60:	40001000 	.word	0x40001000

08000c64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <MX_USART3_UART_Init+0x5c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_USART3_UART_Init+0x58>)
 8000ca8:	f002 fb82 	bl	80033b0 <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cb2:	f000 f97f 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001a4 	.word	0x200001a4
 8000cc0:	40004800 	.word	0x40004800

08000cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	; 0x38
 8000cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cda:	4bae      	ldr	r3, [pc, #696]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4aad      	ldr	r2, [pc, #692]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000ce0:	f043 0310 	orr.w	r3, r3, #16
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4bab      	ldr	r3, [pc, #684]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	623b      	str	r3, [r7, #32]
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	4ba8      	ldr	r3, [pc, #672]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4aa7      	ldr	r2, [pc, #668]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4ba5      	ldr	r3, [pc, #660]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	4ba2      	ldr	r3, [pc, #648]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4aa1      	ldr	r2, [pc, #644]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d10:	f043 0320 	orr.w	r3, r3, #32
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b9f      	ldr	r3, [pc, #636]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	61bb      	str	r3, [r7, #24]
 8000d20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	4b9c      	ldr	r3, [pc, #624]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a9b      	ldr	r2, [pc, #620]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b99      	ldr	r3, [pc, #612]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b96      	ldr	r3, [pc, #600]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a95      	ldr	r2, [pc, #596]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b93      	ldr	r3, [pc, #588]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b90      	ldr	r3, [pc, #576]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a8f      	ldr	r2, [pc, #572]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b8d      	ldr	r3, [pc, #564]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6a:	4b8a      	ldr	r3, [pc, #552]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a89      	ldr	r2, [pc, #548]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b87      	ldr	r3, [pc, #540]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	4b84      	ldr	r3, [pc, #528]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a83      	ldr	r2, [pc, #524]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b81      	ldr	r3, [pc, #516]	; (8000f94 <MX_GPIO_Init+0x2d0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f24e 41f8 	movw	r1, #58616	; 0xe4f8
 8000da0:	487d      	ldr	r0, [pc, #500]	; (8000f98 <MX_GPIO_Init+0x2d4>)
 8000da2:	f000 fe21 	bl	80019e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000da6:	2200      	movs	r2, #0
 8000da8:	f241 419f 	movw	r1, #5279	; 0x149f
 8000dac:	487b      	ldr	r0, [pc, #492]	; (8000f9c <MX_GPIO_Init+0x2d8>)
 8000dae:	f000 fe1b 	bl	80019e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f248 0110 	movw	r1, #32784	; 0x8010
 8000db8:	4879      	ldr	r0, [pc, #484]	; (8000fa0 <MX_GPIO_Init+0x2dc>)
 8000dba:	f000 fe15 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f24f 01b3 	movw	r1, #61619	; 0xf0b3
 8000dc4:	4877      	ldr	r0, [pc, #476]	; (8000fa4 <MX_GPIO_Init+0x2e0>)
 8000dc6:	f000 fe0f 	bl	80019e8 <HAL_GPIO_WritePin>
                          |LD3_Pin|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 512e 	mov.w	r1, #11136	; 0x2b80
 8000dd0:	4875      	ldr	r0, [pc, #468]	; (8000fa8 <MX_GPIO_Init+0x2e4>)
 8000dd2:	f000 fe09 	bl	80019e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2|GPIO_PIN_6
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f24c 01c4 	movw	r1, #49348	; 0xc0c4
 8000ddc:	4873      	ldr	r0, [pc, #460]	; (8000fac <MX_GPIO_Init+0x2e8>)
 8000dde:	f000 fe03 	bl	80019e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f244 1160 	movw	r1, #16736	; 0x4160
 8000de8:	4871      	ldr	r0, [pc, #452]	; (8000fb0 <MX_GPIO_Init+0x2ec>)
 8000dea:	f000 fdfd 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE6 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_0;
 8000dee:	2345      	movs	r3, #69	; 0x45
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4869      	ldr	r0, [pc, #420]	; (8000fa8 <MX_GPIO_Init+0x2e4>)
 8000e02:	f000 fc2d 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	485f      	ldr	r0, [pc, #380]	; (8000f9c <MX_GPIO_Init+0x2d8>)
 8000e1e:	f000 fc1f 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF6
                           PF7 PF10 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000e22:	f24e 43f8 	movw	r3, #58616	; 0xe4f8
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4857      	ldr	r0, [pc, #348]	; (8000f98 <MX_GPIO_Init+0x2d4>)
 8000e3c:	f000 fc10 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e40:	f241 439f 	movw	r3, #5279	; 0x149f
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4850      	ldr	r0, [pc, #320]	; (8000f9c <MX_GPIO_Init+0x2d8>)
 8000e5a:	f000 fc01 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e62:	2303      	movs	r3, #3
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	484b      	ldr	r0, [pc, #300]	; (8000fa0 <MX_GPIO_Init+0x2dc>)
 8000e72:	f000 fbf5 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000e76:	f248 0310 	movw	r3, #32784	; 0x8010
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4844      	ldr	r0, [pc, #272]	; (8000fa0 <MX_GPIO_Init+0x2dc>)
 8000e90:	f000 fbe6 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 PB13
                           LD3_Pin PB15 PB4 PB5
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8000e94:	f24f 03b3 	movw	r3, #61619	; 0xf0b3
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD3_Pin|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	483d      	ldr	r0, [pc, #244]	; (8000fa4 <MX_GPIO_Init+0x2e0>)
 8000eae:	f000 fbd7 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000eb2:	2344      	movs	r3, #68	; 0x44
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4837      	ldr	r0, [pc, #220]	; (8000fa4 <MX_GPIO_Init+0x2e0>)
 8000ec6:	f000 fbcb 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG9 PG10
                           PG11 PG12 PG13 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10
 8000eca:	f64b 6303 	movw	r3, #48643	; 0xbe03
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4834      	ldr	r0, [pc, #208]	; (8000fb0 <MX_GPIO_Init+0x2ec>)
 8000ee0:	f000 fbbe 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE11
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8000ee4:	f44f 532e 	mov.w	r3, #11136	; 0x2b80
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	482a      	ldr	r0, [pc, #168]	; (8000fa8 <MX_GPIO_Init+0x2e4>)
 8000efe:	f000 fbaf 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000f02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4825      	ldr	r0, [pc, #148]	; (8000fac <MX_GPIO_Init+0x2e8>)
 8000f18:	f000 fba2 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 PD2 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2|GPIO_PIN_6
 8000f1c:	f24c 03c4 	movw	r3, #49348	; 0xc0c4
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f32:	4619      	mov	r1, r3
 8000f34:	481d      	ldr	r0, [pc, #116]	; (8000fac <MX_GPIO_Init+0x2e8>)
 8000f36:	f000 fb93 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG5 PG6 PG8 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_14;
 8000f3a:	f244 1360 	movw	r3, #16736	; 0x4160
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <MX_GPIO_Init+0x2ec>)
 8000f54:	f000 fb84 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <MX_GPIO_Init+0x2ec>)
 8000f6c:	f000 fb78 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_GPIO_Init+0x2d8>)
 8000f86:	f000 fb6b 	bl	8001660 <HAL_GPIO_Init>

}
 8000f8a:	bf00      	nop
 8000f8c:	3738      	adds	r7, #56	; 0x38
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40021800 	.word	0x40021800

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <Error_Handler+0x8>
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_MspInit+0x44>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_MspInit+0x44>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_MspInit+0x44>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_MspInit+0x44>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_MspInit+0x44>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_MspInit+0x44>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_TIM_Base_MspInit+0x44>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d113      	bne.n	8001042 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_TIM_Base_MspInit+0x48>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <HAL_TIM_Base_MspInit+0x48>)
 8001020:	f043 0310 	orr.w	r3, r3, #16
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_TIM_Base_MspInit+0x48>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2036      	movs	r0, #54	; 0x36
 8001038:	f000 fa49 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800103c:	2036      	movs	r0, #54	; 0x36
 800103e:	f000 fa62 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40001000 	.word	0x40001000
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0ae      	sub	sp, #184	; 0xb8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2290      	movs	r2, #144	; 0x90
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f003 fd71 	bl	8004b5c <memset>
  if(huart->Instance==USART3)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a26      	ldr	r2, [pc, #152]	; (8001118 <HAL_UART_MspInit+0xc4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d144      	bne.n	800110e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001088:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800108a:	2300      	movs	r3, #0
 800108c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4618      	mov	r0, r3
 8001094:	f001 f9f6 	bl	8002484 <HAL_RCCEx_PeriphCLKConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800109e:	f7ff ff89 	bl	8000fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_UART_MspInit+0xc8>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a1d      	ldr	r2, [pc, #116]	; (800111c <HAL_UART_MspInit+0xc8>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_UART_MspInit+0xc8>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_UART_MspInit+0xc8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a17      	ldr	r2, [pc, #92]	; (800111c <HAL_UART_MspInit+0xc8>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0xc8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ec:	2307      	movs	r3, #7
 80010ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <HAL_UART_MspInit+0xcc>)
 80010fa:	f000 fab1 	bl	8001660 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2027      	movs	r0, #39	; 0x27
 8001104:	f000 f9e3 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001108:	2027      	movs	r0, #39	; 0x27
 800110a:	f000 f9fc 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	37b8      	adds	r7, #184	; 0xb8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40004800 	.word	0x40004800
 800111c:	40023800 	.word	0x40023800
 8001120:	40020c00 	.word	0x40020c00

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 f88e 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <USART3_IRQHandler+0x10>)
 800117e:	f002 fa07 	bl	8003590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200001a4 	.word	0x200001a4

0800118c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <TIM6_DAC_IRQHandler+0x10>)
 8001192:	f001 fe6f 	bl	8002e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000158 	.word	0x20000158

080011a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e0:	4c0b      	ldr	r4, [pc, #44]	; (8001210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ee:	f7ff ffd7 	bl	80011a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f003 fc8f 	bl	8004b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff fbf5 	bl	80009e4 <main>
  bx  lr    
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001208:	08004bac 	.word	0x08004bac
  ldr r2, =_sbss
 800120c:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8001210:	2000040c 	.word	0x2000040c

08001214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC_IRQHandler>

08001216 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121a:	2003      	movs	r0, #3
 800121c:	f000 f94c 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001220:	2000      	movs	r0, #0
 8001222:	f000 f805 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001226:	f7ff fecb 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f967 	bl	8001522 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800126c:	f000 f92f 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000130 	.word	0x20000130
 8001288:	20000138 	.word	0x20000138
 800128c:	20000134 	.word	0x20000134

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000138 	.word	0x20000138
 80012b4:	20000408 	.word	0x20000408

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000408 	.word	0x20000408

080012d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff ffee 	bl	80012b8 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012e8:	d005      	beq.n	80012f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_Delay+0x44>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f6:	bf00      	nop
 80012f8:	f7ff ffde 	bl	80012b8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f7      	bhi.n	80012f8 <HAL_Delay+0x28>
  {
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000138 	.word	0x20000138

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <__NVIC_SetPriorityGrouping+0x40>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	4313      	orrs	r3, r2
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x40>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	05fa0000 	.word	0x05fa0000

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <__NVIC_EnableIRQ+0x38>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	; (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff29 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff3e 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff31 	bl	800137c <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff feb6 	bl	80012b8 <HAL_GetTick>
 800154c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d008      	beq.n	800156c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e052      	b.n	8001612 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0216 	bic.w	r2, r2, #22
 800157a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800158a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <HAL_DMA_Abort+0x62>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001598:	2b00      	cmp	r3, #0
 800159a:	d007      	beq.n	80015ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0208 	bic.w	r2, r2, #8
 80015aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015bc:	e013      	b.n	80015e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015be:	f7ff fe7b 	bl	80012b8 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d90c      	bls.n	80015e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2220      	movs	r2, #32
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2203      	movs	r2, #3
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e015      	b.n	8001612 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1e4      	bne.n	80015be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f8:	223f      	movs	r2, #63	; 0x3f
 80015fa:	409a      	lsls	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d004      	beq.n	8001638 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e00c      	b.n	8001652 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2205      	movs	r2, #5
 800163c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e175      	b.n	800196c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001680:	2201      	movs	r2, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8164 	bne.w	8001966 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d005      	beq.n	80016b6 <HAL_GPIO_Init+0x56>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d130      	bne.n	8001718 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 0201 	and.w	r2, r3, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b03      	cmp	r3, #3
 8001722:	d017      	beq.n	8001754 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d123      	bne.n	80017a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	08da      	lsrs	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3208      	adds	r2, #8
 80017a2:	69b9      	ldr	r1, [r7, #24]
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80be 	beq.w	8001966 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_GPIO_Init+0x324>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_GPIO_Init+0x324>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b63      	ldr	r3, [pc, #396]	; (8001984 <HAL_GPIO_Init+0x324>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001802:	4a61      	ldr	r2, [pc, #388]	; (8001988 <HAL_GPIO_Init+0x328>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a58      	ldr	r2, [pc, #352]	; (800198c <HAL_GPIO_Init+0x32c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d037      	beq.n	800189e <HAL_GPIO_Init+0x23e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a57      	ldr	r2, [pc, #348]	; (8001990 <HAL_GPIO_Init+0x330>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d031      	beq.n	800189a <HAL_GPIO_Init+0x23a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a56      	ldr	r2, [pc, #344]	; (8001994 <HAL_GPIO_Init+0x334>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d02b      	beq.n	8001896 <HAL_GPIO_Init+0x236>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a55      	ldr	r2, [pc, #340]	; (8001998 <HAL_GPIO_Init+0x338>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d025      	beq.n	8001892 <HAL_GPIO_Init+0x232>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a54      	ldr	r2, [pc, #336]	; (800199c <HAL_GPIO_Init+0x33c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01f      	beq.n	800188e <HAL_GPIO_Init+0x22e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a53      	ldr	r2, [pc, #332]	; (80019a0 <HAL_GPIO_Init+0x340>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x22a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_GPIO_Init+0x344>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x226>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a51      	ldr	r2, [pc, #324]	; (80019a8 <HAL_GPIO_Init+0x348>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x222>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a50      	ldr	r2, [pc, #320]	; (80019ac <HAL_GPIO_Init+0x34c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x21e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_GPIO_Init+0x350>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x21a>
 8001876:	2309      	movs	r3, #9
 8001878:	e012      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800187a:	230a      	movs	r3, #10
 800187c:	e010      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800187e:	2308      	movs	r3, #8
 8001880:	e00e      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 8001882:	2307      	movs	r3, #7
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 8001886:	2306      	movs	r3, #6
 8001888:	e00a      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800188a:	2305      	movs	r3, #5
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800188e:	2304      	movs	r3, #4
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x240>
 800189e:	2300      	movs	r3, #0
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018b0:	4935      	ldr	r1, [pc, #212]	; (8001988 <HAL_GPIO_Init+0x328>)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_GPIO_Init+0x354>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e2:	4a34      	ldr	r2, [pc, #208]	; (80019b4 <HAL_GPIO_Init+0x354>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_GPIO_Init+0x354>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800190c:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <HAL_GPIO_Init+0x354>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <HAL_GPIO_Init+0x354>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <HAL_GPIO_Init+0x354>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_GPIO_Init+0x354>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <HAL_GPIO_Init+0x354>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b0f      	cmp	r3, #15
 8001970:	f67f ae86 	bls.w	8001680 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40021400 	.word	0x40021400
 80019a4:	40021800 	.word	0x40021800
 80019a8:	40021c00 	.word	0x40021c00
 80019ac:	40022000 	.word	0x40022000
 80019b0:	40022400 	.word	0x40022400
 80019b4:	40013c00 	.word	0x40013c00

080019b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e001      	b.n	80019da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a04:	e003      	b.n	8001a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	619a      	str	r2, [r3, #24]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40007000 	.word	0x40007000

08001a3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a6a:	f7ff fc25 	bl	80012b8 <HAL_GetTick>
 8001a6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a70:	e009      	b.n	8001a86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a72:	f7ff fc21 	bl	80012b8 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a80:	d901      	bls.n	8001a86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e022      	b.n	8001acc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a92:	d1ee      	bne.n	8001a72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa0:	f7ff fc0a 	bl	80012b8 <HAL_GetTick>
 8001aa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001aa6:	e009      	b.n	8001abc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001aa8:	f7ff fc06 	bl	80012b8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ab6:	d901      	bls.n	8001abc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e007      	b.n	8001acc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ac8:	d1ee      	bne.n	8001aa8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40007000 	.word	0x40007000

08001adc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e29b      	b.n	800202a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8087 	beq.w	8001c0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b00:	4b96      	ldr	r3, [pc, #600]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d00c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0c:	4b93      	ldr	r3, [pc, #588]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d112      	bne.n	8001b3e <HAL_RCC_OscConfig+0x62>
 8001b18:	4b90      	ldr	r3, [pc, #576]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b24:	d10b      	bne.n	8001b3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b26:	4b8d      	ldr	r3, [pc, #564]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d06c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x130>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d168      	bne.n	8001c0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e275      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x7a>
 8001b48:	4b84      	ldr	r3, [pc, #528]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a83      	ldr	r2, [pc, #524]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e02e      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd8>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x9c>
 8001b5e:	4b7f      	ldr	r3, [pc, #508]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a7e      	ldr	r2, [pc, #504]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b7c      	ldr	r3, [pc, #496]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a7b      	ldr	r2, [pc, #492]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0xc0>
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a75      	ldr	r2, [pc, #468]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b73      	ldr	r3, [pc, #460]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a72      	ldr	r2, [pc, #456]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd8>
 8001b9c:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a6b      	ldr	r2, [pc, #428]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fb7c 	bl	80012b8 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fb78 	bl	80012b8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e229      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b61      	ldr	r3, [pc, #388]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe8>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fb68 	bl	80012b8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fb64 	bl	80012b8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e215      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x110>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d069      	beq.n	8001cee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c26:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d11c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x190>
 8001c32:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x17a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e1e9      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	493d      	ldr	r1, [pc, #244]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	e040      	b.n	8001cee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d023      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a38      	ldr	r2, [pc, #224]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fb1a 	bl	80012b8 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff fb16 	bl	80012b8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1c7      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9a:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4929      	ldr	r1, [pc, #164]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
 8001cba:	e018      	b.n	8001cee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff faf6 	bl	80012b8 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff faf2 	bl	80012b8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1a3      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d038      	beq.n	8001d6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d019      	beq.n	8001d36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fad3 	bl	80012b8 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d16:	f7ff facf 	bl	80012b8 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e180      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x23a>
 8001d34:	e01a      	b.n	8001d6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_RCC_OscConfig+0x280>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7ff fab9 	bl	80012b8 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fab5 	bl	80012b8 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d903      	bls.n	8001d60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e166      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
 8001d5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	4b92      	ldr	r3, [pc, #584]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ee      	bne.n	8001d4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a4 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b8c      	ldr	r3, [pc, #560]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b89      	ldr	r3, [pc, #548]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a88      	ldr	r2, [pc, #544]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b86      	ldr	r3, [pc, #536]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da2:	4b83      	ldr	r3, [pc, #524]	; (8001fb0 <HAL_RCC_OscConfig+0x4d4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d118      	bne.n	8001de0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001dae:	4b80      	ldr	r3, [pc, #512]	; (8001fb0 <HAL_RCC_OscConfig+0x4d4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7f      	ldr	r2, [pc, #508]	; (8001fb0 <HAL_RCC_OscConfig+0x4d4>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fa7d 	bl	80012b8 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7ff fa79 	bl	80012b8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b64      	cmp	r3, #100	; 0x64
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e12a      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd4:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0x4d4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x31a>
 8001de8:	4b70      	ldr	r3, [pc, #448]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	4a6f      	ldr	r2, [pc, #444]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6713      	str	r3, [r2, #112]	; 0x70
 8001df4:	e02d      	b.n	8001e52 <HAL_RCC_OscConfig+0x376>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x33c>
 8001dfe:	4b6b      	ldr	r3, [pc, #428]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a6a      	ldr	r2, [pc, #424]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0a:	4b68      	ldr	r3, [pc, #416]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	4a67      	ldr	r2, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e10:	f023 0304 	bic.w	r3, r3, #4
 8001e14:	6713      	str	r3, [r2, #112]	; 0x70
 8001e16:	e01c      	b.n	8001e52 <HAL_RCC_OscConfig+0x376>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d10c      	bne.n	8001e3a <HAL_RCC_OscConfig+0x35e>
 8001e20:	4b62      	ldr	r3, [pc, #392]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	4a61      	ldr	r2, [pc, #388]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2c:	4b5f      	ldr	r3, [pc, #380]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	4a5e      	ldr	r2, [pc, #376]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6713      	str	r3, [r2, #112]	; 0x70
 8001e38:	e00b      	b.n	8001e52 <HAL_RCC_OscConfig+0x376>
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	4a5b      	ldr	r2, [pc, #364]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6713      	str	r3, [r2, #112]	; 0x70
 8001e46:	4b59      	ldr	r3, [pc, #356]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4a:	4a58      	ldr	r2, [pc, #352]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d015      	beq.n	8001e86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fa2d 	bl	80012b8 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7ff fa29 	bl	80012b8 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e0d8      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e78:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ee      	beq.n	8001e62 <HAL_RCC_OscConfig+0x386>
 8001e84:	e014      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e86:	f7ff fa17 	bl	80012b8 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7ff fa13 	bl	80012b8 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0c2      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ee      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d105      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a3c      	ldr	r2, [pc, #240]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80ae 	beq.w	8002028 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ecc:	4b37      	ldr	r3, [pc, #220]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d06d      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d14b      	bne.n	8001f78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee0:	4b32      	ldr	r3, [pc, #200]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a31      	ldr	r2, [pc, #196]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff f9e4 	bl	80012b8 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7ff f9e0 	bl	80012b8 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e091      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	019b      	lsls	r3, r3, #6
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	061b      	lsls	r3, r3, #24
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	071b      	lsls	r3, r3, #28
 8001f3e:	491b      	ldr	r1, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a18      	ldr	r2, [pc, #96]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7ff f9b2 	bl	80012b8 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff f9ae 	bl	80012b8 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e05f      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x47c>
 8001f76:	e057      	b.n	8002028 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f998 	bl	80012b8 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff f994 	bl	80012b8 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e045      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_RCC_OscConfig+0x4d0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4b0>
 8001faa:	e03d      	b.n	8002028 <HAL_RCC_OscConfig+0x54c>
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_RCC_OscConfig+0x558>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d030      	beq.n	8002024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d129      	bne.n	8002024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d122      	bne.n	8002024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d119      	bne.n	8002024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d10f      	bne.n	8002024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d107      	bne.n	8002024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800

08002038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0d0      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d910      	bls.n	8002080 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 020f 	bic.w	r2, r3, #15
 8002066:	4965      	ldr	r1, [pc, #404]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b8      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 800209e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a52      	ldr	r2, [pc, #328]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80020b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	494d      	ldr	r1, [pc, #308]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d040      	beq.n	800215c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d115      	bne.n	800211a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07f      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e073      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06b      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4936      	ldr	r1, [pc, #216]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800212c:	f7ff f8c4 	bl	80012b8 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	e00a      	b.n	800214a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002134:	f7ff f8c0 	bl	80012b8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e053      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 020c 	and.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d1eb      	bne.n	8002134 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d210      	bcs.n	800218c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 020f 	bic.w	r2, r3, #15
 8002172:	4922      	ldr	r1, [pc, #136]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e032      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4916      	ldr	r1, [pc, #88]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	490e      	ldr	r1, [pc, #56]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ca:	f000 f821 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	490a      	ldr	r1, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x1cc>)
 80021dc:	5ccb      	ldrb	r3, [r1, r3]
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1d0>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1d4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f820 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023c00 	.word	0x40023c00
 8002200:	40023800 	.word	0x40023800
 8002204:	08004b84 	.word	0x08004b84
 8002208:	20000130 	.word	0x20000130
 800220c:	20000134 	.word	0x20000134

08002210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002214:	b094      	sub	sp, #80	; 0x50
 8002216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	647b      	str	r3, [r7, #68]	; 0x44
 800221c:	2300      	movs	r3, #0
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002220:	2300      	movs	r3, #0
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002228:	4b79      	ldr	r3, [pc, #484]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d00d      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x40>
 8002234:	2b08      	cmp	r3, #8
 8002236:	f200 80e1 	bhi.w	80023fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x34>
 800223e:	2b04      	cmp	r3, #4
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x3a>
 8002242:	e0db      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002244:	4b73      	ldr	r3, [pc, #460]	; (8002414 <HAL_RCC_GetSysClockFreq+0x204>)
 8002246:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002248:	e0db      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224a:	4b73      	ldr	r3, [pc, #460]	; (8002418 <HAL_RCC_GetSysClockFreq+0x208>)
 800224c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800224e:	e0d8      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002250:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800225a:	4b6d      	ldr	r3, [pc, #436]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002266:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	099b      	lsrs	r3, r3, #6
 800226c:	2200      	movs	r2, #0
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002270:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002278:	633b      	str	r3, [r7, #48]	; 0x30
 800227a:	2300      	movs	r3, #0
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
 800227e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002282:	4622      	mov	r2, r4
 8002284:	462b      	mov	r3, r5
 8002286:	f04f 0000 	mov.w	r0, #0
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	0159      	lsls	r1, r3, #5
 8002290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002294:	0150      	lsls	r0, r2, #5
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4621      	mov	r1, r4
 800229c:	1a51      	subs	r1, r2, r1
 800229e:	6139      	str	r1, [r7, #16]
 80022a0:	4629      	mov	r1, r5
 80022a2:	eb63 0301 	sbc.w	r3, r3, r1
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b4:	4659      	mov	r1, fp
 80022b6:	018b      	lsls	r3, r1, #6
 80022b8:	4651      	mov	r1, sl
 80022ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022be:	4651      	mov	r1, sl
 80022c0:	018a      	lsls	r2, r1, #6
 80022c2:	4651      	mov	r1, sl
 80022c4:	ebb2 0801 	subs.w	r8, r2, r1
 80022c8:	4659      	mov	r1, fp
 80022ca:	eb63 0901 	sbc.w	r9, r3, r1
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022e2:	4690      	mov	r8, r2
 80022e4:	4699      	mov	r9, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	eb18 0303 	adds.w	r3, r8, r3
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	462b      	mov	r3, r5
 80022f0:	eb49 0303 	adc.w	r3, r9, r3
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002302:	4629      	mov	r1, r5
 8002304:	024b      	lsls	r3, r1, #9
 8002306:	4621      	mov	r1, r4
 8002308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800230c:	4621      	mov	r1, r4
 800230e:	024a      	lsls	r2, r1, #9
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002316:	2200      	movs	r2, #0
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
 800231a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800231c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002320:	f7fd ff8a 	bl	8000238 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4613      	mov	r3, r2
 800232a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800232c:	e058      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232e:	4b38      	ldr	r3, [pc, #224]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	099b      	lsrs	r3, r3, #6
 8002334:	2200      	movs	r2, #0
 8002336:	4618      	mov	r0, r3
 8002338:	4611      	mov	r1, r2
 800233a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002348:	4642      	mov	r2, r8
 800234a:	464b      	mov	r3, r9
 800234c:	f04f 0000 	mov.w	r0, #0
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	0159      	lsls	r1, r3, #5
 8002356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235a:	0150      	lsls	r0, r2, #5
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4641      	mov	r1, r8
 8002362:	ebb2 0a01 	subs.w	sl, r2, r1
 8002366:	4649      	mov	r1, r9
 8002368:	eb63 0b01 	sbc.w	fp, r3, r1
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800237c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002380:	ebb2 040a 	subs.w	r4, r2, sl
 8002384:	eb63 050b 	sbc.w	r5, r3, fp
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	00eb      	lsls	r3, r5, #3
 8002392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002396:	00e2      	lsls	r2, r4, #3
 8002398:	4614      	mov	r4, r2
 800239a:	461d      	mov	r5, r3
 800239c:	4643      	mov	r3, r8
 800239e:	18e3      	adds	r3, r4, r3
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	464b      	mov	r3, r9
 80023a4:	eb45 0303 	adc.w	r3, r5, r3
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023b6:	4629      	mov	r1, r5
 80023b8:	028b      	lsls	r3, r1, #10
 80023ba:	4621      	mov	r1, r4
 80023bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c0:	4621      	mov	r1, r4
 80023c2:	028a      	lsls	r2, r1, #10
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ca:	2200      	movs	r2, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	61fa      	str	r2, [r7, #28]
 80023d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d4:	f7fd ff30 	bl	8000238 <__aeabi_uldivmod>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4613      	mov	r3, r2
 80023de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80023f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023fa:	e002      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetSysClockFreq+0x204>)
 80023fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002404:	4618      	mov	r0, r3
 8002406:	3750      	adds	r7, #80	; 0x50
 8002408:	46bd      	mov	sp, r7
 800240a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	00f42400 	.word	0x00f42400
 8002418:	007a1200 	.word	0x007a1200

0800241c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_RCC_GetHCLKFreq+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000130 	.word	0x20000130

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff0 	bl	800241c <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0a9b      	lsrs	r3, r3, #10
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	08004b94 	.word	0x08004b94

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffdc 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0b5b      	lsrs	r3, r3, #13
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	08004b94 	.word	0x08004b94

08002484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024ac:	4b69      	ldr	r3, [pc, #420]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a68      	ldr	r2, [pc, #416]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024b6:	6093      	str	r3, [r2, #8]
 80024b8:	4b66      	ldr	r3, [pc, #408]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	4964      	ldr	r1, [pc, #400]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d017      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	4959      	ldr	r1, [pc, #356]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fc:	d101      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800250a:	2301      	movs	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d017      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800251a:	4b4e      	ldr	r3, [pc, #312]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	494a      	ldr	r1, [pc, #296]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d101      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800253a:	2301      	movs	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 808b 	beq.w	800267e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a39      	ldr	r2, [pc, #228]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
 8002574:	4b37      	ldr	r3, [pc, #220]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002580:	4b35      	ldr	r3, [pc, #212]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a34      	ldr	r2, [pc, #208]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258c:	f7fe fe94 	bl	80012b8 <HAL_GetTick>
 8002590:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7fe fe90 	bl	80012b8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e38f      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025a6:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d035      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d02e      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025f2:	4a18      	ldr	r2, [pc, #96]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d114      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fe58 	bl	80012b8 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7fe fe54 	bl	80012b8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e351      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0ee      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800263a:	d111      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800264a:	400b      	ands	r3, r1
 800264c:	4901      	ldr	r1, [pc, #4]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
 8002652:	e00b      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000
 800265c:	0ffffcff 	.word	0x0ffffcff
 8002660:	4bac      	ldr	r3, [pc, #688]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4aab      	ldr	r2, [pc, #684]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002666:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800266a:	6093      	str	r3, [r2, #8]
 800266c:	4ba9      	ldr	r3, [pc, #676]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	49a6      	ldr	r1, [pc, #664]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267a:	4313      	orrs	r3, r2
 800267c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800268a:	4ba2      	ldr	r3, [pc, #648]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002690:	4aa0      	ldr	r2, [pc, #640]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002696:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800269a:	4b9e      	ldr	r3, [pc, #632]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	499b      	ldr	r1, [pc, #620]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b8:	4b96      	ldr	r3, [pc, #600]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c6:	4993      	ldr	r1, [pc, #588]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026da:	4b8e      	ldr	r3, [pc, #568]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e8:	498a      	ldr	r1, [pc, #552]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fc:	4b85      	ldr	r3, [pc, #532]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800270a:	4982      	ldr	r1, [pc, #520]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800271e:	4b7d      	ldr	r3, [pc, #500]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	4979      	ldr	r1, [pc, #484]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002740:	4b74      	ldr	r3, [pc, #464]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4971      	ldr	r1, [pc, #452]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002762:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f023 020c 	bic.w	r2, r3, #12
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	4968      	ldr	r1, [pc, #416]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002784:	4b63      	ldr	r3, [pc, #396]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4960      	ldr	r1, [pc, #384]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a6:	4b5b      	ldr	r3, [pc, #364]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b4:	4957      	ldr	r1, [pc, #348]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027c8:	4b52      	ldr	r3, [pc, #328]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	494f      	ldr	r1, [pc, #316]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027ea:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	4946      	ldr	r1, [pc, #280]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800280c:	4b41      	ldr	r3, [pc, #260]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	493e      	ldr	r1, [pc, #248]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800282e:	4b39      	ldr	r3, [pc, #228]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	4935      	ldr	r1, [pc, #212]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002850:	4b30      	ldr	r3, [pc, #192]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285e:	492d      	ldr	r1, [pc, #180]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d011      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002872:	4b28      	ldr	r3, [pc, #160]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002880:	4924      	ldr	r1, [pc, #144]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002890:	d101      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002892:	2301      	movs	r3, #1
 8002894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	4914      	ldr	r1, [pc, #80]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e4:	490b      	ldr	r1, [pc, #44]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00f      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002908:	4902      	ldr	r1, [pc, #8]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002910:	e002      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002924:	4b8a      	ldr	r3, [pc, #552]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800292a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	4986      	ldr	r1, [pc, #536]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002948:	4b81      	ldr	r3, [pc, #516]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800294a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800294e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002958:	497d      	ldr	r1, [pc, #500]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d006      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80d6 	beq.w	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002974:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800297a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800297e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe fc9a 	bl	80012b8 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002988:	f7fe fc96 	bl	80012b8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e195      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800299a:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d021      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11d      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029ba:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029c8:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ce:	0e1b      	lsrs	r3, r3, #24
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	019a      	lsls	r2, r3, #6
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	071b      	lsls	r3, r3, #28
 80029ee:	4958      	ldr	r1, [pc, #352]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d02e      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a20:	d129      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a22:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a30:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a36:	0f1b      	lsrs	r3, r3, #28
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	019a      	lsls	r2, r3, #6
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	041b      	lsls	r3, r3, #16
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	071b      	lsls	r3, r3, #28
 8002a56:	493e      	ldr	r1, [pc, #248]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a5e:	4b3c      	ldr	r3, [pc, #240]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a64:	f023 021f 	bic.w	r2, r3, #31
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	4938      	ldr	r1, [pc, #224]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01d      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a82:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a88:	0e1b      	lsrs	r3, r3, #24
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a96:	0f1b      	lsrs	r3, r3, #28
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	019a      	lsls	r2, r3, #6
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	061b      	lsls	r3, r3, #24
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	071b      	lsls	r3, r3, #28
 8002ab6:	4926      	ldr	r1, [pc, #152]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d011      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	019a      	lsls	r2, r3, #6
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	071b      	lsls	r3, r3, #28
 8002ae6:	491a      	ldr	r1, [pc, #104]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afa:	f7fe fbdd 	bl	80012b8 <HAL_GetTick>
 8002afe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b02:	f7fe fbd9 	bl	80012b8 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0d8      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	f040 80ce 	bne.w	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b34:	f7fe fbc0 	bl	80012b8 <HAL_GetTick>
 8002b38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b3c:	f7fe fbbc 	bl	80012b8 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d904      	bls.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0bb      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b54:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b60:	d0ec      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d02e      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d12a      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b8a:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b98:	4b4d      	ldr	r3, [pc, #308]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	0f1b      	lsrs	r3, r3, #28
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	019a      	lsls	r2, r3, #6
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	071b      	lsls	r3, r3, #28
 8002bbe:	4944      	ldr	r1, [pc, #272]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bc6:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	493d      	ldr	r1, [pc, #244]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d022      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf4:	d11d      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bf6:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	0e1b      	lsrs	r3, r3, #24
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c04:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	0f1b      	lsrs	r3, r3, #28
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	019a      	lsls	r2, r3, #6
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	071b      	lsls	r3, r3, #28
 8002c2a:	4929      	ldr	r1, [pc, #164]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	0e1b      	lsrs	r3, r3, #24
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	019a      	lsls	r2, r3, #6
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	431a      	orrs	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	071b      	lsls	r3, r3, #28
 8002c72:	4917      	ldr	r1, [pc, #92]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4911      	ldr	r1, [pc, #68]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fb0c 	bl	80012b8 <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ca4:	f7fe fb08 	bl	80012b8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e007      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc2:	d1ef      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e049      	b.n	8002d7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe f984 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 fa00 	bl	8003118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d001      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e054      	b.n	8002e46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x80>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc6:	d01d      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x80>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d018      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x80>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x80>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x80>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_TIM_Base_Start_IT+0xe0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x80>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <HAL_TIM_Base_Start_IT+0xe4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x80>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_TIM_Base_Start_IT+0xe8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d115      	bne.n	8002e30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <HAL_TIM_Base_Start_IT+0xec>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d015      	beq.n	8002e42 <HAL_TIM_Base_Start_IT+0xbe>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d011      	beq.n	8002e42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	e008      	b.n	8002e42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e000      	b.n	8002e44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	40000c00 	.word	0x40000c00
 8002e64:	40010400 	.word	0x40010400
 8002e68:	40014000 	.word	0x40014000
 8002e6c:	40001800 	.word	0x40001800
 8002e70:	00010007 	.word	0x00010007

08002e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d122      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d11b      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0202 	mvn.w	r2, #2
 8002ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f90f 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f901 	bl	80030c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f912 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0204 	mvn.w	r2, #4
 8002ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8e5 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8d7 	bl	80030c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f8e8 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0208 	mvn.w	r2, #8
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f8bb 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8ad 	bl	80030c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f8be 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0210 	mvn.w	r2, #16
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f891 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f883 	bl	80030c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f894 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0201 	mvn.w	r2, #1
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f85d 	bl	80030b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d10e      	bne.n	8003024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d107      	bne.n	8003024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f9b2 	bl	8003388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003032:	d10e      	bne.n	8003052 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b80      	cmp	r3, #128	; 0x80
 8003040:	d107      	bne.n	8003052 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800304a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f9a5 	bl	800339c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d10e      	bne.n	800307e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d107      	bne.n	800307e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f842 	bl	8003102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b20      	cmp	r3, #32
 800308a:	d10e      	bne.n	80030aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b20      	cmp	r3, #32
 8003098:	d107      	bne.n	80030aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f06f 0220 	mvn.w	r2, #32
 80030a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f965 	bl	8003374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a40      	ldr	r2, [pc, #256]	; (800322c <TIM_Base_SetConfig+0x114>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <TIM_Base_SetConfig+0x40>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d00f      	beq.n	8003158 <TIM_Base_SetConfig+0x40>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a3d      	ldr	r2, [pc, #244]	; (8003230 <TIM_Base_SetConfig+0x118>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00b      	beq.n	8003158 <TIM_Base_SetConfig+0x40>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a3c      	ldr	r2, [pc, #240]	; (8003234 <TIM_Base_SetConfig+0x11c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d007      	beq.n	8003158 <TIM_Base_SetConfig+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3b      	ldr	r2, [pc, #236]	; (8003238 <TIM_Base_SetConfig+0x120>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3a      	ldr	r2, [pc, #232]	; (800323c <TIM_Base_SetConfig+0x124>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d108      	bne.n	800316a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a2f      	ldr	r2, [pc, #188]	; (800322c <TIM_Base_SetConfig+0x114>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d02b      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003178:	d027      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a2c      	ldr	r2, [pc, #176]	; (8003230 <TIM_Base_SetConfig+0x118>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d023      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a2b      	ldr	r2, [pc, #172]	; (8003234 <TIM_Base_SetConfig+0x11c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01f      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2a      	ldr	r2, [pc, #168]	; (8003238 <TIM_Base_SetConfig+0x120>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01b      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a29      	ldr	r2, [pc, #164]	; (800323c <TIM_Base_SetConfig+0x124>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d017      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a28      	ldr	r2, [pc, #160]	; (8003240 <TIM_Base_SetConfig+0x128>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a27      	ldr	r2, [pc, #156]	; (8003244 <TIM_Base_SetConfig+0x12c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00f      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <TIM_Base_SetConfig+0x130>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00b      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a25      	ldr	r2, [pc, #148]	; (800324c <TIM_Base_SetConfig+0x134>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d007      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a24      	ldr	r2, [pc, #144]	; (8003250 <TIM_Base_SetConfig+0x138>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d003      	beq.n	80031ca <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a23      	ldr	r2, [pc, #140]	; (8003254 <TIM_Base_SetConfig+0x13c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d108      	bne.n	80031dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <TIM_Base_SetConfig+0x114>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0xf8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a0c      	ldr	r2, [pc, #48]	; (800323c <TIM_Base_SetConfig+0x124>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	615a      	str	r2, [r3, #20]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40010000 	.word	0x40010000
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800
 8003238:	40000c00 	.word	0x40000c00
 800323c:	40010400 	.word	0x40010400
 8003240:	40014000 	.word	0x40014000
 8003244:	40014400 	.word	0x40014400
 8003248:	40014800 	.word	0x40014800
 800324c:	40001800 	.word	0x40001800
 8003250:	40001c00 	.word	0x40001c00
 8003254:	40002000 	.word	0x40002000

08003258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800326c:	2302      	movs	r3, #2
 800326e:	e06d      	b.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a30      	ldr	r2, [pc, #192]	; (8003358 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2f      	ldr	r2, [pc, #188]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d108      	bne.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a20      	ldr	r2, [pc, #128]	; (8003358 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e2:	d01d      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1a      	ldr	r2, [pc, #104]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a15      	ldr	r2, [pc, #84]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a16      	ldr	r2, [pc, #88]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a15      	ldr	r2, [pc, #84]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10c      	bne.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003326:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	4313      	orrs	r3, r2
 8003330:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40010000 	.word	0x40010000
 800335c:	40010400 	.word	0x40010400
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40014000 	.word	0x40014000
 8003370:	40001800 	.word	0x40001800

08003374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e040      	b.n	8003444 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd fe3e 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	; 0x24
 80033dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fbea 	bl	8003bc8 <UART_SetConfig>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e022      	b.n	8003444 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fe42 	bl	8004090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800341a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800342a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fec9 	bl	80041d4 <UART_CheckIdleState>
 8003442:	4603      	mov	r3, r0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800344c:	b480      	push	{r7}
 800344e:	b08b      	sub	sp, #44	; 0x2c
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	4613      	mov	r3, r2
 8003458:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800345e:	2b20      	cmp	r3, #32
 8003460:	d147      	bne.n	80034f2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_UART_Transmit_IT+0x22>
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e040      	b.n	80034f4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2221      	movs	r2, #33	; 0x21
 800349a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a4:	d107      	bne.n	80034b6 <HAL_UART_Transmit_IT+0x6a>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a13      	ldr	r2, [pc, #76]	; (8003500 <HAL_UART_Transmit_IT+0xb4>)
 80034b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80034b4:	e002      	b.n	80034bc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4a12      	ldr	r2, [pc, #72]	; (8003504 <HAL_UART_Transmit_IT+0xb8>)
 80034ba:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	613b      	str	r3, [r7, #16]
   return(result);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	69f9      	ldr	r1, [r7, #28]
 80034e0:	6a3a      	ldr	r2, [r7, #32]
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e6      	bne.n	80034bc <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	372c      	adds	r7, #44	; 0x2c
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	08004733 	.word	0x08004733
 8003504:	0800467d 	.word	0x0800467d

08003508 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800351c:	2b20      	cmp	r3, #32
 800351e:	d132      	bne.n	8003586 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_UART_Receive_IT+0x24>
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e02b      	b.n	8003588 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d018      	beq.n	8003576 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	613b      	str	r3, [r7, #16]
   return(result);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	69f9      	ldr	r1, [r7, #28]
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e6      	bne.n	8003544 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	461a      	mov	r2, r3
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 ff3d 	bl	80043fc <UART_Start_Receive_IT>
 8003582:	4603      	mov	r3, r0
 8003584:	e000      	b.n	8003588 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
  }
}
 8003588:	4618      	mov	r0, r3
 800358a:	3728      	adds	r7, #40	; 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b0ba      	sub	sp, #232	; 0xe8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80035ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80035be:	4013      	ands	r3, r2
 80035c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80035c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d115      	bne.n	80035f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00f      	beq.n	80035f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 82ac 	beq.w	8003b46 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
      }
      return;
 80035f6:	e2a6      	b.n	8003b46 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8117 	beq.w	8003830 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800360e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_UART_IRQHandler+0x298>)
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 810a 	beq.w	8003830 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d011      	beq.n	800364c <HAL_UART_IRQHandler+0xbc>
 8003628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2201      	movs	r2, #1
 800363a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800364c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d011      	beq.n	800367c <HAL_UART_IRQHandler+0xec>
 8003658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2202      	movs	r2, #2
 800366a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003672:	f043 0204 	orr.w	r2, r3, #4
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d011      	beq.n	80036ac <HAL_UART_IRQHandler+0x11c>
 8003688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2204      	movs	r2, #4
 800369a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a2:	f043 0202 	orr.w	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d017      	beq.n	80036e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d105      	bne.n	80036d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2208      	movs	r2, #8
 80036d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036de:	f043 0208 	orr.w	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <HAL_UART_IRQHandler+0x18a>
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00c      	beq.n	800371a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8212 	beq.w	8003b4a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d005      	beq.n	8003772 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800376a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800376e:	2b00      	cmp	r3, #0
 8003770:	d04f      	beq.n	8003812 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 ff08 	bl	8004588 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d141      	bne.n	800380a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3308      	adds	r3, #8
 800378c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800379c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3308      	adds	r3, #8
 80037ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1d9      	bne.n	8003786 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d013      	beq.n	8003802 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037de:	4a13      	ldr	r2, [pc, #76]	; (800382c <HAL_UART_IRQHandler+0x29c>)
 80037e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd ff17 	bl	800161a <HAL_DMA_Abort_IT>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d017      	beq.n	8003822 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037fc:	4610      	mov	r0, r2
 80037fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	e00f      	b.n	8003822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9c0 	bl	8003b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	e00b      	b.n	8003822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f9bc 	bl	8003b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	e007      	b.n	8003822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9b8 	bl	8003b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003820:	e193      	b.n	8003b4a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003822:	bf00      	nop
    return;
 8003824:	e191      	b.n	8003b4a <HAL_UART_IRQHandler+0x5ba>
 8003826:	bf00      	nop
 8003828:	04000120 	.word	0x04000120
 800382c:	08004651 	.word	0x08004651

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 814c 	bne.w	8003ad2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800383a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8145 	beq.w	8003ad2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 813e 	beq.w	8003ad2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2210      	movs	r2, #16
 800385c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	f040 80b6 	bne.w	80039da <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800387a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8165 	beq.w	8003b4e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800388a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800388e:	429a      	cmp	r2, r3
 8003890:	f080 815d 	bcs.w	8003b4e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800389a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a8:	f000 8086 	beq.w	80039b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1da      	bne.n	80038ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3308      	adds	r3, #8
 80038fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3308      	adds	r3, #8
 8003916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800391a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800391e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003922:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800392c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e1      	bne.n	80038f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3308      	adds	r3, #8
 8003938:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3308      	adds	r3, #8
 8003952:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003956:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003958:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800395c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e3      	bne.n	8003932 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003988:	f023 0310 	bic.w	r3, r3, #16
 800398c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800399a:	65bb      	str	r3, [r7, #88]	; 0x58
 800399c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e4      	bne.n	8003978 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd fdc1 	bl	800153a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8e2 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039d8:	e0b9      	b.n	8003b4e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80ab 	beq.w	8003b52 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80039fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80a6 	beq.w	8003b52 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a28:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e4      	bne.n	8003a06 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3308      	adds	r3, #8
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a60:	633a      	str	r2, [r7, #48]	; 0x30
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e3      	bne.n	8003a3c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f023 0310 	bic.w	r3, r3, #16
 8003a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	69b9      	ldr	r1, [r7, #24]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e4      	bne.n	8003a88 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f866 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ad0:	e03f      	b.n	8003b52 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00e      	beq.n	8003afc <HAL_UART_IRQHandler+0x56c>
 8003ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003af2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f85d 	bl	8003bb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003afa:	e02d      	b.n	8003b58 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01c      	beq.n	8003b56 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4798      	blx	r3
    }
    return;
 8003b24:	e017      	b.n	8003b56 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <HAL_UART_IRQHandler+0x5c8>
 8003b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fe57 	bl	80047f2 <UART_EndTransmit_IT>
    return;
 8003b44:	e008      	b.n	8003b58 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003b46:	bf00      	nop
 8003b48:	e006      	b.n	8003b58 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003b4a:	bf00      	nop
 8003b4c:	e004      	b.n	8003b58 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003b56:	bf00      	nop
  }

}
 8003b58:	37e8      	adds	r7, #232	; 0xe8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop

08003b60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4ba6      	ldr	r3, [pc, #664]	; (8003e8c <UART_SetConfig+0x2c4>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	6979      	ldr	r1, [r7, #20]
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a94      	ldr	r2, [pc, #592]	; (8003e90 <UART_SetConfig+0x2c8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d120      	bne.n	8003c86 <UART_SetConfig+0xbe>
 8003c44:	4b93      	ldr	r3, [pc, #588]	; (8003e94 <UART_SetConfig+0x2cc>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d816      	bhi.n	8003c80 <UART_SetConfig+0xb8>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0x90>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c75 	.word	0x08003c75
 8003c60:	08003c6f 	.word	0x08003c6f
 8003c64:	08003c7b 	.word	0x08003c7b
 8003c68:	2301      	movs	r3, #1
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e150      	b.n	8003f10 <UART_SetConfig+0x348>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e14d      	b.n	8003f10 <UART_SetConfig+0x348>
 8003c74:	2304      	movs	r3, #4
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e14a      	b.n	8003f10 <UART_SetConfig+0x348>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e147      	b.n	8003f10 <UART_SetConfig+0x348>
 8003c80:	2310      	movs	r3, #16
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e144      	b.n	8003f10 <UART_SetConfig+0x348>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a83      	ldr	r2, [pc, #524]	; (8003e98 <UART_SetConfig+0x2d0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d132      	bne.n	8003cf6 <UART_SetConfig+0x12e>
 8003c90:	4b80      	ldr	r3, [pc, #512]	; (8003e94 <UART_SetConfig+0x2cc>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d828      	bhi.n	8003cf0 <UART_SetConfig+0x128>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0xdc>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cd9 	.word	0x08003cd9
 8003ca8:	08003cf1 	.word	0x08003cf1
 8003cac:	08003cf1 	.word	0x08003cf1
 8003cb0:	08003cf1 	.word	0x08003cf1
 8003cb4:	08003ce5 	.word	0x08003ce5
 8003cb8:	08003cf1 	.word	0x08003cf1
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003cf1 	.word	0x08003cf1
 8003cc4:	08003cdf 	.word	0x08003cdf
 8003cc8:	08003cf1 	.word	0x08003cf1
 8003ccc:	08003cf1 	.word	0x08003cf1
 8003cd0:	08003cf1 	.word	0x08003cf1
 8003cd4:	08003ceb 	.word	0x08003ceb
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e118      	b.n	8003f10 <UART_SetConfig+0x348>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e115      	b.n	8003f10 <UART_SetConfig+0x348>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e112      	b.n	8003f10 <UART_SetConfig+0x348>
 8003cea:	2308      	movs	r3, #8
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e10f      	b.n	8003f10 <UART_SetConfig+0x348>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e10c      	b.n	8003f10 <UART_SetConfig+0x348>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a68      	ldr	r2, [pc, #416]	; (8003e9c <UART_SetConfig+0x2d4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d120      	bne.n	8003d42 <UART_SetConfig+0x17a>
 8003d00:	4b64      	ldr	r3, [pc, #400]	; (8003e94 <UART_SetConfig+0x2cc>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d0a:	2b30      	cmp	r3, #48	; 0x30
 8003d0c:	d013      	beq.n	8003d36 <UART_SetConfig+0x16e>
 8003d0e:	2b30      	cmp	r3, #48	; 0x30
 8003d10:	d814      	bhi.n	8003d3c <UART_SetConfig+0x174>
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d009      	beq.n	8003d2a <UART_SetConfig+0x162>
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d810      	bhi.n	8003d3c <UART_SetConfig+0x174>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <UART_SetConfig+0x15c>
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d006      	beq.n	8003d30 <UART_SetConfig+0x168>
 8003d22:	e00b      	b.n	8003d3c <UART_SetConfig+0x174>
 8003d24:	2300      	movs	r3, #0
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e0f2      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e0ef      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d30:	2304      	movs	r3, #4
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e0ec      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d36:	2308      	movs	r3, #8
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e0e9      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e0e6      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a56      	ldr	r2, [pc, #344]	; (8003ea0 <UART_SetConfig+0x2d8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d120      	bne.n	8003d8e <UART_SetConfig+0x1c6>
 8003d4c:	4b51      	ldr	r3, [pc, #324]	; (8003e94 <UART_SetConfig+0x2cc>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d56:	2bc0      	cmp	r3, #192	; 0xc0
 8003d58:	d013      	beq.n	8003d82 <UART_SetConfig+0x1ba>
 8003d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d5c:	d814      	bhi.n	8003d88 <UART_SetConfig+0x1c0>
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d009      	beq.n	8003d76 <UART_SetConfig+0x1ae>
 8003d62:	2b80      	cmp	r3, #128	; 0x80
 8003d64:	d810      	bhi.n	8003d88 <UART_SetConfig+0x1c0>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <UART_SetConfig+0x1a8>
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d006      	beq.n	8003d7c <UART_SetConfig+0x1b4>
 8003d6e:	e00b      	b.n	8003d88 <UART_SetConfig+0x1c0>
 8003d70:	2300      	movs	r3, #0
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e0cc      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d76:	2302      	movs	r3, #2
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e0c9      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e0c6      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d82:	2308      	movs	r3, #8
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e0c3      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e0c0      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a44      	ldr	r2, [pc, #272]	; (8003ea4 <UART_SetConfig+0x2dc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d125      	bne.n	8003de4 <UART_SetConfig+0x21c>
 8003d98:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <UART_SetConfig+0x2cc>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da6:	d017      	beq.n	8003dd8 <UART_SetConfig+0x210>
 8003da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dac:	d817      	bhi.n	8003dde <UART_SetConfig+0x216>
 8003dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db2:	d00b      	beq.n	8003dcc <UART_SetConfig+0x204>
 8003db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db8:	d811      	bhi.n	8003dde <UART_SetConfig+0x216>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <UART_SetConfig+0x1fe>
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc2:	d006      	beq.n	8003dd2 <UART_SetConfig+0x20a>
 8003dc4:	e00b      	b.n	8003dde <UART_SetConfig+0x216>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e0a1      	b.n	8003f10 <UART_SetConfig+0x348>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e09e      	b.n	8003f10 <UART_SetConfig+0x348>
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	77fb      	strb	r3, [r7, #31]
 8003dd6:	e09b      	b.n	8003f10 <UART_SetConfig+0x348>
 8003dd8:	2308      	movs	r3, #8
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e098      	b.n	8003f10 <UART_SetConfig+0x348>
 8003dde:	2310      	movs	r3, #16
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e095      	b.n	8003f10 <UART_SetConfig+0x348>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2f      	ldr	r2, [pc, #188]	; (8003ea8 <UART_SetConfig+0x2e0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d125      	bne.n	8003e3a <UART_SetConfig+0x272>
 8003dee:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <UART_SetConfig+0x2cc>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003df8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dfc:	d017      	beq.n	8003e2e <UART_SetConfig+0x266>
 8003dfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e02:	d817      	bhi.n	8003e34 <UART_SetConfig+0x26c>
 8003e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e08:	d00b      	beq.n	8003e22 <UART_SetConfig+0x25a>
 8003e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e0e:	d811      	bhi.n	8003e34 <UART_SetConfig+0x26c>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <UART_SetConfig+0x254>
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e18:	d006      	beq.n	8003e28 <UART_SetConfig+0x260>
 8003e1a:	e00b      	b.n	8003e34 <UART_SetConfig+0x26c>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e076      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e22:	2302      	movs	r3, #2
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e073      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e070      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e06d      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e34:	2310      	movs	r3, #16
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e06a      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <UART_SetConfig+0x2e4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d138      	bne.n	8003eb6 <UART_SetConfig+0x2ee>
 8003e44:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <UART_SetConfig+0x2cc>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e52:	d017      	beq.n	8003e84 <UART_SetConfig+0x2bc>
 8003e54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e58:	d82a      	bhi.n	8003eb0 <UART_SetConfig+0x2e8>
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	d00b      	beq.n	8003e78 <UART_SetConfig+0x2b0>
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e64:	d824      	bhi.n	8003eb0 <UART_SetConfig+0x2e8>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <UART_SetConfig+0x2aa>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d006      	beq.n	8003e7e <UART_SetConfig+0x2b6>
 8003e70:	e01e      	b.n	8003eb0 <UART_SetConfig+0x2e8>
 8003e72:	2300      	movs	r3, #0
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e04b      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e048      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e7e:	2304      	movs	r3, #4
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e045      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e84:	2308      	movs	r3, #8
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e042      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e8a:	bf00      	nop
 8003e8c:	efff69f3 	.word	0xefff69f3
 8003e90:	40011000 	.word	0x40011000
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40004400 	.word	0x40004400
 8003e9c:	40004800 	.word	0x40004800
 8003ea0:	40004c00 	.word	0x40004c00
 8003ea4:	40005000 	.word	0x40005000
 8003ea8:	40011400 	.word	0x40011400
 8003eac:	40007800 	.word	0x40007800
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e02c      	b.n	8003f10 <UART_SetConfig+0x348>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a72      	ldr	r2, [pc, #456]	; (8004084 <UART_SetConfig+0x4bc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d125      	bne.n	8003f0c <UART_SetConfig+0x344>
 8003ec0:	4b71      	ldr	r3, [pc, #452]	; (8004088 <UART_SetConfig+0x4c0>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003eca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ece:	d017      	beq.n	8003f00 <UART_SetConfig+0x338>
 8003ed0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ed4:	d817      	bhi.n	8003f06 <UART_SetConfig+0x33e>
 8003ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eda:	d00b      	beq.n	8003ef4 <UART_SetConfig+0x32c>
 8003edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee0:	d811      	bhi.n	8003f06 <UART_SetConfig+0x33e>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <UART_SetConfig+0x326>
 8003ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eea:	d006      	beq.n	8003efa <UART_SetConfig+0x332>
 8003eec:	e00b      	b.n	8003f06 <UART_SetConfig+0x33e>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e00d      	b.n	8003f10 <UART_SetConfig+0x348>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e00a      	b.n	8003f10 <UART_SetConfig+0x348>
 8003efa:	2304      	movs	r3, #4
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e007      	b.n	8003f10 <UART_SetConfig+0x348>
 8003f00:	2308      	movs	r3, #8
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e004      	b.n	8003f10 <UART_SetConfig+0x348>
 8003f06:	2310      	movs	r3, #16
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e001      	b.n	8003f10 <UART_SetConfig+0x348>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f18:	d15b      	bne.n	8003fd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f1a:	7ffb      	ldrb	r3, [r7, #31]
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d828      	bhi.n	8003f72 <UART_SetConfig+0x3aa>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0x360>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	08003f55 	.word	0x08003f55
 8003f30:	08003f5d 	.word	0x08003f5d
 8003f34:	08003f73 	.word	0x08003f73
 8003f38:	08003f63 	.word	0x08003f63
 8003f3c:	08003f73 	.word	0x08003f73
 8003f40:	08003f73 	.word	0x08003f73
 8003f44:	08003f73 	.word	0x08003f73
 8003f48:	08003f6b 	.word	0x08003f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f7fe fa72 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003f50:	61b8      	str	r0, [r7, #24]
        break;
 8003f52:	e013      	b.n	8003f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7fe fa82 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8003f58:	61b8      	str	r0, [r7, #24]
        break;
 8003f5a:	e00f      	b.n	8003f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f5c:	4b4b      	ldr	r3, [pc, #300]	; (800408c <UART_SetConfig+0x4c4>)
 8003f5e:	61bb      	str	r3, [r7, #24]
        break;
 8003f60:	e00c      	b.n	8003f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f62:	f7fe f955 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8003f66:	61b8      	str	r0, [r7, #24]
        break;
 8003f68:	e008      	b.n	8003f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6e:	61bb      	str	r3, [r7, #24]
        break;
 8003f70:	e004      	b.n	8003f7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	77bb      	strb	r3, [r7, #30]
        break;
 8003f7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d074      	beq.n	800406c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	005a      	lsls	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b0f      	cmp	r3, #15
 8003f9c:	d916      	bls.n	8003fcc <UART_SetConfig+0x404>
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d212      	bcs.n	8003fcc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f023 030f 	bic.w	r3, r3, #15
 8003fae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	89fb      	ldrh	r3, [r7, #14]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	89fa      	ldrh	r2, [r7, #14]
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	e04f      	b.n	800406c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	77bb      	strb	r3, [r7, #30]
 8003fd0:	e04c      	b.n	800406c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd2:	7ffb      	ldrb	r3, [r7, #31]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d828      	bhi.n	800402a <UART_SetConfig+0x462>
 8003fd8:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <UART_SetConfig+0x418>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	0800402b 	.word	0x0800402b
 8003ff0:	0800401b 	.word	0x0800401b
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	0800402b 	.word	0x0800402b
 8003ffc:	0800402b 	.word	0x0800402b
 8004000:	08004023 	.word	0x08004023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe fa16 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8004008:	61b8      	str	r0, [r7, #24]
        break;
 800400a:	e013      	b.n	8004034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7fe fa26 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8004010:	61b8      	str	r0, [r7, #24]
        break;
 8004012:	e00f      	b.n	8004034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004014:	4b1d      	ldr	r3, [pc, #116]	; (800408c <UART_SetConfig+0x4c4>)
 8004016:	61bb      	str	r3, [r7, #24]
        break;
 8004018:	e00c      	b.n	8004034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401a:	f7fe f8f9 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 800401e:	61b8      	str	r0, [r7, #24]
        break;
 8004020:	e008      	b.n	8004034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004026:	61bb      	str	r3, [r7, #24]
        break;
 8004028:	e004      	b.n	8004034 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	77bb      	strb	r3, [r7, #30]
        break;
 8004032:	bf00      	nop
    }

    if (pclk != 0U)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	085a      	lsrs	r2, r3, #1
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b0f      	cmp	r3, #15
 8004052:	d909      	bls.n	8004068 <UART_SetConfig+0x4a0>
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405a:	d205      	bcs.n	8004068 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	e001      	b.n	800406c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004078:	7fbb      	ldrb	r3, [r7, #30]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40007c00 	.word	0x40007c00
 8004088:	40023800 	.word	0x40023800
 800408c:	00f42400 	.word	0x00f42400

08004090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418e:	d10a      	bne.n	80041a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af02      	add	r7, sp, #8
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041e4:	f7fd f868 	bl	80012b8 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d10e      	bne.n	8004216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f831 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e027      	b.n	8004266 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d10e      	bne.n	8004242 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f81b 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e011      	b.n	8004266 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b09c      	sub	sp, #112	; 0x70
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427e:	e0a7      	b.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004286:	f000 80a3 	beq.w	80043d0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fd f815 	bl	80012b8 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800429a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800429c:	2b00      	cmp	r3, #0
 800429e:	d13f      	bne.n	8004320 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b4:	667b      	str	r3, [r7, #100]	; 0x64
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e6      	bne.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3308      	adds	r3, #8
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3308      	adds	r3, #8
 80042f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e068      	b.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d050      	beq.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433c:	d148      	bne.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004346:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800435c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
 8004368:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e6      	bne.n	8004348 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	613b      	str	r3, [r7, #16]
   return(result);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	66bb      	str	r3, [r7, #104]	; 0x68
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800439a:	623a      	str	r2, [r7, #32]
 800439c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	69f9      	ldr	r1, [r7, #28]
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e5      	bne.n	800437a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e010      	b.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	f43f af48 	beq.w	8004280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3770      	adds	r7, #112	; 0x70
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b097      	sub	sp, #92	; 0x5c
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	88fa      	ldrh	r2, [r7, #6]
 8004414:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	88fa      	ldrh	r2, [r7, #6]
 800441c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442e:	d10e      	bne.n	800444e <UART_Start_Receive_IT+0x52>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d105      	bne.n	8004444 <UART_Start_Receive_IT+0x48>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800443e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004442:	e02d      	b.n	80044a0 <UART_Start_Receive_IT+0xa4>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	22ff      	movs	r2, #255	; 0xff
 8004448:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800444c:	e028      	b.n	80044a0 <UART_Start_Receive_IT+0xa4>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10d      	bne.n	8004472 <UART_Start_Receive_IT+0x76>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d104      	bne.n	8004468 <UART_Start_Receive_IT+0x6c>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	22ff      	movs	r2, #255	; 0xff
 8004462:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004466:	e01b      	b.n	80044a0 <UART_Start_Receive_IT+0xa4>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	227f      	movs	r2, #127	; 0x7f
 800446c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004470:	e016      	b.n	80044a0 <UART_Start_Receive_IT+0xa4>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800447a:	d10d      	bne.n	8004498 <UART_Start_Receive_IT+0x9c>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <UART_Start_Receive_IT+0x92>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	227f      	movs	r2, #127	; 0x7f
 8004488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800448c:	e008      	b.n	80044a0 <UART_Start_Receive_IT+0xa4>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	223f      	movs	r2, #63	; 0x3f
 8004492:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004496:	e003      	b.n	80044a0 <UART_Start_Receive_IT+0xa4>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2222      	movs	r2, #34	; 0x22
 80044ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	657b      	str	r3, [r7, #84]	; 0x54
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80044d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e5      	bne.n	80044b0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ec:	d107      	bne.n	80044fe <UART_Start_Receive_IT+0x102>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d103      	bne.n	80044fe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a21      	ldr	r2, [pc, #132]	; (8004580 <UART_Start_Receive_IT+0x184>)
 80044fa:	669a      	str	r2, [r3, #104]	; 0x68
 80044fc:	e002      	b.n	8004504 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a20      	ldr	r2, [pc, #128]	; (8004584 <UART_Start_Receive_IT+0x188>)
 8004502:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d019      	beq.n	8004540 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004520:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
 800452c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e6      	bne.n	800450c <UART_Start_Receive_IT+0x110>
 800453e:	e018      	b.n	8004572 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	613b      	str	r3, [r7, #16]
   return(result);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f043 0320 	orr.w	r3, r3, #32
 8004554:	653b      	str	r3, [r7, #80]	; 0x50
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455e:	623b      	str	r3, [r7, #32]
 8004560:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	69f9      	ldr	r1, [r7, #28]
 8004564:	6a3a      	ldr	r2, [r7, #32]
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	61bb      	str	r3, [r7, #24]
   return(result);
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e6      	bne.n	8004540 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	375c      	adds	r7, #92	; 0x5c
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	080049ad 	.word	0x080049ad
 8004584:	08004847 	.word	0x08004847

08004588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b095      	sub	sp, #84	; 0x54
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ae:	643b      	str	r3, [r7, #64]	; 0x40
 80045b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e6      	bne.n	8004590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3308      	adds	r3, #8
 80045c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3308      	adds	r3, #8
 80045e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e5      	bne.n	80045c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d118      	bne.n	8004630 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	60bb      	str	r3, [r7, #8]
   return(result);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f023 0310 	bic.w	r3, r3, #16
 8004612:	647b      	str	r3, [r7, #68]	; 0x44
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6979      	ldr	r1, [r7, #20]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	613b      	str	r3, [r7, #16]
   return(result);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004644:	bf00      	nop
 8004646:	3754      	adds	r7, #84	; 0x54
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fa8a 	bl	8003b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b08f      	sub	sp, #60	; 0x3c
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004688:	2b21      	cmp	r3, #33	; 0x21
 800468a:	d14c      	bne.n	8004726 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d132      	bne.n	80046fe <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e6      	bne.n	8004698 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046de:	633b      	str	r3, [r7, #48]	; 0x30
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6979      	ldr	r1, [r7, #20]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	613b      	str	r3, [r7, #16]
   return(result);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e6      	bne.n	80046ca <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80046fc:	e013      	b.n	8004726 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004702:	781a      	ldrb	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004726:	bf00      	nop
 8004728:	373c      	adds	r7, #60	; 0x3c
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004732:	b480      	push	{r7}
 8004734:	b091      	sub	sp, #68	; 0x44
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800473e:	2b21      	cmp	r3, #33	; 0x21
 8004740:	d151      	bne.n	80047e6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d132      	bne.n	80047b4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	623b      	str	r3, [r7, #32]
   return(result);
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
 800476e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e6      	bne.n	800474e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	60fb      	str	r3, [r7, #12]
   return(result);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004794:	637b      	str	r3, [r7, #52]	; 0x34
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	69b9      	ldr	r1, [r7, #24]
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	617b      	str	r3, [r7, #20]
   return(result);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e6      	bne.n	8004780 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80047b2:	e018      	b.n	80047e6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80047ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ce:	1c9a      	adds	r2, r3, #2
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80047e6:	bf00      	nop
 80047e8:	3744      	adds	r7, #68	; 0x44
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b088      	sub	sp, #32
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	60bb      	str	r3, [r7, #8]
   return(result);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6979      	ldr	r1, [r7, #20]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e6      	bne.n	80047fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff f991 	bl	8003b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800483e:	bf00      	nop
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b096      	sub	sp, #88	; 0x58
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004854:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485e:	2b22      	cmp	r3, #34	; 0x22
 8004860:	f040 8098 	bne.w	8004994 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800486e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004872:	b2d9      	uxtb	r1, r3
 8004874:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004878:	b2da      	uxtb	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	400a      	ands	r2, r1
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d17b      	bne.n	80049a4 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048c0:	653b      	str	r3, [r7, #80]	; 0x50
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ca:	647b      	str	r3, [r7, #68]	; 0x44
 80048cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e6      	bne.n	80048ac <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	623b      	str	r3, [r7, #32]
   return(result);
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492a:	2b01      	cmp	r3, #1
 800492c:	d12e      	bne.n	800498c <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	60fb      	str	r3, [r7, #12]
   return(result);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f023 0310 	bic.w	r3, r3, #16
 8004948:	64bb      	str	r3, [r7, #72]	; 0x48
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	69b9      	ldr	r1, [r7, #24]
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	617b      	str	r3, [r7, #20]
   return(result);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e6      	bne.n	8004934 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d103      	bne.n	800497c <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2210      	movs	r2, #16
 800497a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff f909 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800498a:	e00b      	b.n	80049a4 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff f8f1 	bl	8003b74 <HAL_UART_RxCpltCallback>
}
 8004992:	e007      	b.n	80049a4 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0208 	orr.w	r2, r2, #8
 80049a2:	619a      	str	r2, [r3, #24]
}
 80049a4:	bf00      	nop
 80049a6:	3758      	adds	r7, #88	; 0x58
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b096      	sub	sp, #88	; 0x58
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049c4:	2b22      	cmp	r3, #34	; 0x22
 80049c6:	f040 8098 	bne.w	8004afa <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80049da:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80049de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80049e2:	4013      	ands	r3, r2
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	1c9a      	adds	r2, r3, #2
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d17b      	bne.n	8004b0a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a30:	643b      	str	r3, [r7, #64]	; 0x40
 8004a32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e6      	bne.n	8004a12 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3308      	adds	r3, #8
 8004a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e5      	bne.n	8004a44 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d12e      	bne.n	8004af2 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f023 0310 	bic.w	r3, r3, #16
 8004aae:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e6      	bne.n	8004a9a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d103      	bne.n	8004ae2 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2210      	movs	r2, #16
 8004ae0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff f856 	bl	8003b9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004af0:	e00b      	b.n	8004b0a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff f83e 	bl	8003b74 <HAL_UART_RxCpltCallback>
}
 8004af8:	e007      	b.n	8004b0a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699a      	ldr	r2, [r3, #24]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0208 	orr.w	r2, r2, #8
 8004b08:	619a      	str	r2, [r3, #24]
}
 8004b0a:	bf00      	nop
 8004b0c:	3758      	adds	r7, #88	; 0x58
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <__libc_init_array>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	4d0d      	ldr	r5, [pc, #52]	; (8004b4c <__libc_init_array+0x38>)
 8004b18:	4c0d      	ldr	r4, [pc, #52]	; (8004b50 <__libc_init_array+0x3c>)
 8004b1a:	1b64      	subs	r4, r4, r5
 8004b1c:	10a4      	asrs	r4, r4, #2
 8004b1e:	2600      	movs	r6, #0
 8004b20:	42a6      	cmp	r6, r4
 8004b22:	d109      	bne.n	8004b38 <__libc_init_array+0x24>
 8004b24:	4d0b      	ldr	r5, [pc, #44]	; (8004b54 <__libc_init_array+0x40>)
 8004b26:	4c0c      	ldr	r4, [pc, #48]	; (8004b58 <__libc_init_array+0x44>)
 8004b28:	f000 f820 	bl	8004b6c <_init>
 8004b2c:	1b64      	subs	r4, r4, r5
 8004b2e:	10a4      	asrs	r4, r4, #2
 8004b30:	2600      	movs	r6, #0
 8004b32:	42a6      	cmp	r6, r4
 8004b34:	d105      	bne.n	8004b42 <__libc_init_array+0x2e>
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
 8004b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3c:	4798      	blx	r3
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7ee      	b.n	8004b20 <__libc_init_array+0xc>
 8004b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b46:	4798      	blx	r3
 8004b48:	3601      	adds	r6, #1
 8004b4a:	e7f2      	b.n	8004b32 <__libc_init_array+0x1e>
 8004b4c:	08004ba4 	.word	0x08004ba4
 8004b50:	08004ba4 	.word	0x08004ba4
 8004b54:	08004ba4 	.word	0x08004ba4
 8004b58:	08004ba8 	.word	0x08004ba8

08004b5c <memset>:
 8004b5c:	4402      	add	r2, r0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d100      	bne.n	8004b66 <memset+0xa>
 8004b64:	4770      	bx	lr
 8004b66:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6a:	e7f9      	b.n	8004b60 <memset+0x4>

08004b6c <_init>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr

08004b78 <_fini>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	bf00      	nop
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr
